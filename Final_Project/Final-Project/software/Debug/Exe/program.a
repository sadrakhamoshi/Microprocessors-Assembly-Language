;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/26/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;#include <stdio.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega32.h>
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;//#include <avr/io.h>		/* Include AVR std. library file */
;// Declare your global variables here
;
;// Voltage Reference: Int., cap. on AREF
;#define ADC_VREF_TYPE ((1 << REFS1) | (1 << REFS0) | (0 << ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028       ADMUX = adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0029       // Delay needed for the stabilization of the ADC input voltage
; 0000 002A       delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002B       // Start the AD conversion
; 0000 002C       ADCSRA |= (1 << ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002D       // Wait for the AD conversion to complete
; 0000 002E       while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002F             ;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0030       ADCSRA |= (1 << ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031       return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032 }
;PCODE: $00000021 VOL: 0
;
;void _turn_on_heater(int delay)
; 0000 0035 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0036       PORTD = 0x90;
;PCODE: $00000024 VOL: 0
;	delay -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0037       delay_ms(100);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0038       PORTD = 0x80;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0039       delay_ms(delay);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003A       PORTD = 0xC0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003B       delay_ms(delay);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003C       PORTD = 0x40;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003D       delay_ms(delay);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003E       PORTD = 0x60;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003F       delay_ms(delay);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0040       PORTD = 0x20;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0041       delay_ms(delay);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0042       PORTD = 0x30;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0043       delay_ms(delay);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0044       PORTD = 0x10;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0045       delay_ms(delay);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0046 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;void turn_on_cooler(int delay)
; 0000 0049 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004A       PORTD = 0x09;
;PCODE: $0000004B VOL: 0
;	delay -> Y+0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 004B       delay_ms(delay);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004C       PORTD = 0x08;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004D       delay_ms(delay);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004E       PORTD = 0x0C;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004F       delay_ms(delay);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0050       PORTD = 0x04;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0051       delay_ms(delay);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0052       PORTD = 0x06;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0053       delay_ms(delay);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0054       PORTD = 0x02;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0055       delay_ms(delay);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0056       PORTD = 0x03;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0057       delay_ms(delay);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0058       PORTD = 0x01;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0059       delay_ms(delay);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 005A }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;
;void main(void)
; 0000 005D {
;PCODE: $0000006F VOL: 0
; 0000 005E       // Declare your local variables here
; 0000 005F       unsigned int temperature;
; 0000 0060       char output[8];
; 0000 0061       int state = 1;
; 0000 0062       int delay = 900;
; 0000 0063 
; 0000 0064       DDRD = 0xFF; //Make PortD output
;PCODE: $00000070 VOL: 0
;	temperature -> R16,R17
;	output -> Y+0
;	state -> R18,R19
;	delay -> R20,R21
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0065       PORTD = 0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0066       // ADC initialization
; 0000 0067       // ADC Clock frequency: 1000.000 kHz
; 0000 0068       // ADC Voltage Reference: Int., cap. on AREF
; 0000 0069       // ADC Auto Trigger Source: ADC Stopped
; 0000 006A       ADMUX = ADC_VREF_TYPE;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006B       ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 < ...
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006C       SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 006D 
; 0000 006E       // Alphanumeric LCD initialization
; 0000 006F       // Connections are specified in the
; 0000 0070       // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0071       // RS - PORTC Bit 0
; 0000 0072       // RD - PORTC Bit 1
; 0000 0073       // EN - PORTC Bit 2
; 0000 0074       // D4 - PORTC Bit 4
; 0000 0075       // D5 - PORTC Bit 5
; 0000 0076       // D6 - PORTC Bit 6
; 0000 0077       // D7 - PORTC Bit 7
; 0000 0078       // Characters/line: 16
; 0000 0079       lcd_init(16);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 007A       lcd_clear();
;PCODE: $00000081 VOL: 0
; 0000 007B       delay_ms(500);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007C 
; 0000 007D       lcd_gotoxy(1, 0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 007E       lcd_puts("LM35 Sensor");
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007F 
; 0000 0080       while (1)
;PCODE: $0000008B VOL: 0
; 0000 0081       {
; 0000 0082             // Place your code here
; 0000 0083             temperature = read_adc(0) / 4;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0084             snprintf(output, 8, "%d", temperature);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0085             lcd_gotoxy(1, 1);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0086             lcd_puts("Temp: ");
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0087             lcd_puts(output);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0088             if (temperature < 100)
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0089                   lcd_puts(" ");
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008A 
; 0000 008B             lcd_gotoxy(10, 1);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 008C             lcd_putchar(0xDF);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 008D             lcd_putchar('c');
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 008E             switch (state)
;PCODE: $000000B6 VOL: 0
; 0000 008F             {
; 0000 0090             case 1:
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0091                   if (temperature > 35)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0092                   {
; 0000 0093                         state = 21;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0094                   }
; 0000 0095                   if (temperature < 15)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0096                   {
; 0000 0097                         state = 3;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0098                   }
; 0000 0099                   break;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 009A             case 21:
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 009B                   if (temperature < 25)
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 009C                   {
; 0000 009D                         state = 1;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 009E                   }
; 0000 009F                   if (temperature > 40)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00A0                   {
; 0000 00A1                         state = 22;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00A2                   }
; 0000 00A3                   break;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00A4             case 22:
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00A5                   if (temperature < 35)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A6                   {
; 0000 00A7                         state = 21;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A8                   }
; 0000 00A9                   if (temperature > 45)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00AA                   {
; 0000 00AB                         state = 23;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00AC                   }
; 0000 00AD                   break;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00AE             case 23:
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00AF                   if (temperature < 40)
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00B0                   {
; 0000 00B1                         state = 22;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00B2                   }
; 0000 00B3                   break;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00B4             case 3:
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B5                   if (temperature > 30)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00B6                   {
; 0000 00B7                         state = 1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00B8                   }
; 0000 00B9                   break;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00BA             }
;PCODE: $000000FA VOL: 0
; 0000 00BB             switch (state)
;PCODE: $000000FB VOL: 0
; 0000 00BC             {
; 0000 00BD             case 21:
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00BE                   turn_on_cooler(delay / 2);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00BF                   break;
;PCODE: $00000103 VOL: 0
; 0000 00C0             case 22:
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00C1                   turn_on_cooler(delay / 6);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C2                   break;
;PCODE: $0000010C VOL: 0
; 0000 00C3             case 23:
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00C4                   turn_on_cooler(delay / 10);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00C5                   break;
;PCODE: $00000115 VOL: 0
; 0000 00C6             case 3:
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00C7                   _turn_on_heater(100);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00C8                   break;
;PCODE: $0000011C VOL: 0
; 0000 00C9             }
;PCODE: $0000011D VOL: 0
; 0000 00CA       }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00CB       /* Set period in between two steps */
; 0000 00CC       while (1)
;PCODE: $00000120 VOL: 0
; 0000 00CD       {
; 0000 00CE       }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00CF }
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0

	.DSEG
_0x6:
	.BYTE 0x15
