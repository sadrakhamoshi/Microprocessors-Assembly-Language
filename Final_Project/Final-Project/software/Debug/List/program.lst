
AVRASM ver. 2.1.30  D:\university\4001\rizpar\Final-Project\software\Debug\List\program.asm Thu Jan 27 01:25:13 2022

D:\university\4001\rizpar\Final-Project\software\Debug\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\university\4001\rizpar\Final-Project\software\Debug\List\program.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\university\4001\rizpar\Final-Project\software\Debug\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 4d4c
000034 3533
000035 5320
000036 6e65      	.DB  0x4C,0x4D,0x33,0x35,0x20,0x53,0x65,0x6E
000037 6f73
000038 0072
000039 6425
00003a 5400      	.DB  0x73,0x6F,0x72,0x0,0x25,0x64,0x0,0x54
00003b 6d65
00003c 3a70
00003d 0020      	.DB  0x65,0x6D,0x70,0x3A,0x20,0x0
                 _0x2020003:
00003e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003f 000c      	.DW  0x0C
000040 0260      	.DW  _0x6
000041 0066      	.DW  _0x0*2
                 
000042 0007      	.DW  0x07
000043 026c      	.DW  _0x6+12
000044 0075      	.DW  _0x0*2+15
                 
000045 0002      	.DW  0x02
000046 0273      	.DW  _0x6+19
000047 007a      	.DW  _0x0*2+20
                 
000048 0002      	.DW  0x02
000049 0275      	.DW  __base_y_G101
00004a 007c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00004b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004c 94f8      	CLI
00004d 27ee      	CLR  R30
00004e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004f e0f1      	LDI  R31,1
000050 bffb      	OUT  GICR,R31
000051 bfeb      	OUT  GICR,R30
000052 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005c 93ed      	ST   X+,R30
00005d 9701      	SBIW R24,1
00005e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005f e7ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000060 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000061 9185      	LPM  R24,Z+
000062 9195      	LPM  R25,Z+
000063 9700      	SBIW R24,0
000064 f061      	BREQ __GLOBAL_INI_END
000065 91a5      	LPM  R26,Z+
000066 91b5      	LPM  R27,Z+
000067 9005      	LPM  R0,Z+
000068 9015      	LPM  R1,Z+
000069 01bf      	MOVW R22,R30
00006a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006b 9005      	LPM  R0,Z+
00006c 920d      	ST   X+,R0
00006d 9701      	SBIW R24,1
00006e f7e1      	BRNE __GLOBAL_INI_LOOP
00006f 01fb      	MOVW R30,R22
000070 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000071 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000072 bfed      	OUT  SPL,R30
000073 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000074 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000075 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000076 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000077 940c 00c3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/26/2022
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega32.h>
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;//#include <avr/io.h>		/* Include AVR std. library file */
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: Int., cap. on AREF
                 ;#define ADC_VREF_TYPE ((1 << REFS1) | (1 << REFS0) | (0 << ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0028       ADMUX = adc_input | ADC_VREF_TYPE;
000079 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00007a 81e8      	LD   R30,Y
00007b 6ce0      	ORI  R30,LOW(0xC0)
00007c b9e7      	OUT  0x7,R30
                 ; 0000 0029       // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 002A       delay_us(10);
                +
00007d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00007e 958a     +DEC R24
00007f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 002B       // Start the AD conversion
                 ; 0000 002C       ADCSRA |= (1 << ADSC);
000080 9a36      	SBI  0x6,6
                 ; 0000 002D       // Wait for the AD conversion to complete
                 ; 0000 002E       while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x3:
000081 9b34      	SBIS 0x6,4
                 ; 0000 002F             ;
000082 cffe      	RJMP _0x3
                 ; 0000 0030       ADCSRA |= (1 << ADIF);
000083 9a34      	SBI  0x6,4
                 ; 0000 0031       return ADCW;
000084 b1e4      	IN   R30,0x4
000085 b1f5      	IN   R31,0x4+1
000086 940c 03c8 	JMP  _0x2080001
                 ; 0000 0032 }
                 ; .FEND
                 ;
                 ;void _turn_on_heater(int delay)
                 ; 0000 0035 {
                 __turn_on_heater:
                 ; .FSTART __turn_on_heater
                 ; 0000 0036       PORTD = 0x90;
000088 93ba      	ST   -Y,R27
000089 93aa      	ST   -Y,R26
                 ;	delay -> Y+0
00008a e9e0      	LDI  R30,LOW(144)
00008b bbe2      	OUT  0x12,R30
                 ; 0000 0037       delay_ms(100);
00008c e6a4      	LDI  R26,LOW(100)
00008d e0b0      	LDI  R27,0
00008e 940e 042e 	CALL _delay_ms
                 ; 0000 0038       PORTD = 0x80;
000090 e8e0      	LDI  R30,LOW(128)
000091 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0039       delay_ms(delay);
                 ; 0000 003A       PORTD = 0xC0;
000093 ece0      	LDI  R30,LOW(192)
000094 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 003B       delay_ms(delay);
                 ; 0000 003C       PORTD = 0x40;
000096 e4e0      	LDI  R30,LOW(64)
000097 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 003D       delay_ms(delay);
                 ; 0000 003E       PORTD = 0x60;
000099 e6e0      	LDI  R30,LOW(96)
00009a 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 003F       delay_ms(delay);
                 ; 0000 0040       PORTD = 0x20;
00009c e2e0      	LDI  R30,LOW(32)
00009d 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0041       delay_ms(delay);
                 ; 0000 0042       PORTD = 0x30;
00009f e3e0      	LDI  R30,LOW(48)
0000a0 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0043       delay_ms(delay);
                 ; 0000 0044       PORTD = 0x10;
0000a2 e1e0      	LDI  R30,LOW(16)
0000a3 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0045       delay_ms(delay);
                 ; 0000 0046 }
0000a5 940c 0368 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;void turn_on_cooler(int delay)
                 ; 0000 0049 {
                 _turn_on_cooler:
                 ; .FSTART _turn_on_cooler
                 ; 0000 004A       PORTD = 0x09;
0000a7 93ba      	ST   -Y,R27
0000a8 93aa      	ST   -Y,R26
                 ;	delay -> Y+0
0000a9 e0e9      	LDI  R30,LOW(9)
0000aa 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 004B       delay_ms(delay);
                 ; 0000 004C       PORTD = 0x08;
0000ac e0e8      	LDI  R30,LOW(8)
0000ad 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 004D       delay_ms(delay);
                 ; 0000 004E       PORTD = 0x0C;
0000af e0ec      	LDI  R30,LOW(12)
0000b0 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 004F       delay_ms(delay);
                 ; 0000 0050       PORTD = 0x04;
0000b2 e0e4      	LDI  R30,LOW(4)
0000b3 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0051       delay_ms(delay);
                 ; 0000 0052       PORTD = 0x06;
0000b5 e0e6      	LDI  R30,LOW(6)
0000b6 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0053       delay_ms(delay);
                 ; 0000 0054       PORTD = 0x02;
0000b8 e0e2      	LDI  R30,LOW(2)
0000b9 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0055       delay_ms(delay);
                 ; 0000 0056       PORTD = 0x03;
0000bb e0e3      	LDI  R30,LOW(3)
0000bc 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0057       delay_ms(delay);
                 ; 0000 0058       PORTD = 0x01;
0000be e0e1      	LDI  R30,LOW(1)
0000bf 940e 03e3 	CALL SUBOPT_0x0
                 ; 0000 0059       delay_ms(delay);
                 ; 0000 005A }
0000c1 940c 0368 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 005D {
                 _main:
                 ; .FSTART _main
                 ; 0000 005E       // Declare your local variables here
                 ; 0000 005F       unsigned int temperature;
                 ; 0000 0060       char output[8];
                 ; 0000 0061       int state = 1;
                 ; 0000 0062       int delay = 900;
                 ; 0000 0063 
                 ; 0000 0064       DDRD = 0xFF; //Make PortD output
0000c3 9728      	SBIW R28,8
                 ;	temperature -> R16,R17
                 ;	output -> Y+0
                 ;	state -> R18,R19
                 ;	delay -> R20,R21
                +
0000c4 e021     +LDI R18 , LOW ( 1 )
0000c5 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                +
0000c6 e844     +LDI R20 , LOW ( 900 )
0000c7 e053     +LDI R21 , HIGH ( 900 )
                 	__GETWRN 20,21,900
0000c8 efef      	LDI  R30,LOW(255)
0000c9 bbe1      	OUT  0x11,R30
                 ; 0000 0065       PORTD = 0;
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bbe2      	OUT  0x12,R30
                 ; 0000 0066       // ADC initialization
                 ; 0000 0067       // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0068       // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 0069       // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 006A       ADMUX = ADC_VREF_TYPE;
0000cc ece0      	LDI  R30,LOW(192)
0000cd b9e7      	OUT  0x7,R30
                 ; 0000 006B       ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 < ...
0000ce e8e3      	LDI  R30,LOW(131)
0000cf b9e6      	OUT  0x6,R30
                 ; 0000 006C       SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 bfe0      	OUT  0x30,R30
                 ; 0000 006D 
                 ; 0000 006E       // Alphanumeric LCD initialization
                 ; 0000 006F       // Connections are specified in the
                 ; 0000 0070       // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0071       // RS - PORTC Bit 0
                 ; 0000 0072       // RD - PORTC Bit 1
                 ; 0000 0073       // EN - PORTC Bit 2
                 ; 0000 0074       // D4 - PORTC Bit 4
                 ; 0000 0075       // D5 - PORTC Bit 5
                 ; 0000 0076       // D6 - PORTC Bit 6
                 ; 0000 0077       // D7 - PORTC Bit 7
                 ; 0000 0078       // Characters/line: 16
                 ; 0000 0079       lcd_init(16);
0000d2 e1a0      	LDI  R26,LOW(16)
0000d3 940e 039c 	CALL _lcd_init
                 ; 0000 007A       lcd_clear();
0000d5 940e 036a 	CALL _lcd_clear
                 ; 0000 007B       delay_ms(500);
0000d7 efa4      	LDI  R26,LOW(500)
0000d8 e0b1      	LDI  R27,HIGH(500)
0000d9 940e 042e 	CALL _delay_ms
                 ; 0000 007C 
                 ; 0000 007D       lcd_gotoxy(1, 0);
0000db e0e1      	LDI  R30,LOW(1)
0000dc 93ea      	ST   -Y,R30
0000dd e0a0      	LDI  R26,LOW(0)
0000de 940e 035d 	CALL _lcd_gotoxy
                 ; 0000 007E       lcd_puts("LM35 Sensor");
                +
0000e0 e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000e1 e0b2     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000e2 940e 038b 	CALL _lcd_puts
                 ; 0000 007F 
                 ; 0000 0080       while (1)
                 _0x7:
                 ; 0000 0081       {
                 ; 0000 0082             // Place your code here
                 ; 0000 0083             temperature = read_adc(0) / 4;
0000e4 e0a0      	LDI  R26,LOW(0)
0000e5 df93      	RCALL _read_adc
0000e6 940e 0440 	CALL __LSRW2
0000e8 018f      	MOVW R16,R30
                 ; 0000 0084             snprintf(output, 8, "%d", temperature);
0000e9 01fe      	MOVW R30,R28
0000ea 93fa      	ST   -Y,R31
0000eb 93ea      	ST   -Y,R30
0000ec e0e8      	LDI  R30,LOW(8)
0000ed e0f0      	LDI  R31,HIGH(8)
0000ee 93fa      	ST   -Y,R31
0000ef 93ea      	ST   -Y,R30
                +
0000f0 e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0000f1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0000f2 93fa      	ST   -Y,R31
0000f3 93ea      	ST   -Y,R30
0000f4 01f8      	MOVW R30,R16
0000f5 2766      	CLR  R22
0000f6 2777      	CLR  R23
0000f7 940e 0473 	CALL __PUTPARD1
0000f9 e084      	LDI  R24,4
0000fa 940e 0302 	CALL _snprintf
0000fc 962a      	ADIW R28,10
                 ; 0000 0085             lcd_gotoxy(1, 1);
0000fd e0e1      	LDI  R30,LOW(1)
0000fe 93ea      	ST   -Y,R30
0000ff e0a1      	LDI  R26,LOW(1)
000100 940e 035d 	CALL _lcd_gotoxy
                 ; 0000 0086             lcd_puts("Temp: ");
                +
000102 e6ac     +LDI R26 , LOW ( _0x6 + ( 12 ) )
000103 e0b2     +LDI R27 , HIGH ( _0x6 + ( 12 ) )
                 	__POINTW2MN _0x6,12
000104 940e 038b 	CALL _lcd_puts
                 ; 0000 0087             lcd_puts(output);
000106 01de      	MOVW R26,R28
000107 940e 038b 	CALL _lcd_puts
                 ; 0000 0088             if (temperature < 100)
                +
000109 3604     +CPI R16 , LOW ( 100 )
00010a e0e0     +LDI R30 , HIGH ( 100 )
00010b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
00010c f420      	BRSH _0xA
                 ; 0000 0089                   lcd_puts(" ");
                +
00010d e7a3     +LDI R26 , LOW ( _0x6 + ( 19 ) )
00010e e0b2     +LDI R27 , HIGH ( _0x6 + ( 19 ) )
                 	__POINTW2MN _0x6,19
00010f 940e 038b 	CALL _lcd_puts
                 ; 0000 008A 
                 ; 0000 008B             lcd_gotoxy(10, 1);
                 _0xA:
000111 e0ea      	LDI  R30,LOW(10)
000112 93ea      	ST   -Y,R30
000113 e0a1      	LDI  R26,LOW(1)
000114 940e 035d 	CALL _lcd_gotoxy
                 ; 0000 008C             lcd_putchar(0xDF);
000116 edaf      	LDI  R26,LOW(223)
000117 940e 0376 	CALL _lcd_putchar
                 ; 0000 008D             lcd_putchar('c');
000119 e6a3      	LDI  R26,LOW(99)
00011a 940e 0376 	CALL _lcd_putchar
                 ; 0000 008E             switch (state)
00011c 01f9      	MOVW R30,R18
                 ; 0000 008F             {
                 ; 0000 0090             case 1:
00011d 30e1      	CPI  R30,LOW(0x1)
00011e e0a0      	LDI  R26,HIGH(0x1)
00011f 07fa      	CPC  R31,R26
000120 f469      	BRNE _0xE
                 ; 0000 0091                   if (temperature > 35)
                +
000121 3204     +CPI R16 , LOW ( 36 )
000122 e0e0     +LDI R30 , HIGH ( 36 )
000123 071e     +CPC R17 , R30
                 	__CPWRN 16,17,36
000124 f010      	BRLO _0xF
                 ; 0000 0092                   {
                 ; 0000 0093                         state = 21;
                +
000125 e125     +LDI R18 , LOW ( 21 )
000126 e030     +LDI R19 , HIGH ( 21 )
                 	__GETWRN 18,19,21
                 ; 0000 0094                   }
                 ; 0000 0095                   if (temperature < 15)
                 _0xF:
                +
000127 300f     +CPI R16 , LOW ( 15 )
000128 e0e0     +LDI R30 , HIGH ( 15 )
000129 071e     +CPC R17 , R30
                 	__CPWRN 16,17,15
00012a f410      	BRSH _0x10
                 ; 0000 0096                   {
                 ; 0000 0097                         state = 3;
                +
00012b e023     +LDI R18 , LOW ( 3 )
00012c e030     +LDI R19 , HIGH ( 3 )
                 	__GETWRN 18,19,3
                 ; 0000 0098                   }
                 ; 0000 0099                   break;
                 _0x10:
00012d c037      	RJMP _0xD
                 ; 0000 009A             case 21:
                 _0xE:
00012e 31e5      	CPI  R30,LOW(0x15)
00012f e0a0      	LDI  R26,HIGH(0x15)
000130 07fa      	CPC  R31,R26
000131 f469      	BRNE _0x11
                 ; 0000 009B                   if (temperature < 25)
                +
000132 3109     +CPI R16 , LOW ( 25 )
000133 e0e0     +LDI R30 , HIGH ( 25 )
000134 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
000135 f410      	BRSH _0x12
                 ; 0000 009C                   {
                 ; 0000 009D                         state = 1;
                +
000136 e021     +LDI R18 , LOW ( 1 )
000137 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 009E                   }
                 ; 0000 009F                   if (temperature > 40)
                 _0x12:
                +
000138 3209     +CPI R16 , LOW ( 41 )
000139 e0e0     +LDI R30 , HIGH ( 41 )
00013a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,41
00013b f010      	BRLO _0x13
                 ; 0000 00A0                   {
                 ; 0000 00A1                         state = 22;
                +
00013c e126     +LDI R18 , LOW ( 22 )
00013d e030     +LDI R19 , HIGH ( 22 )
                 	__GETWRN 18,19,22
                 ; 0000 00A2                   }
                 ; 0000 00A3                   break;
                 _0x13:
00013e c026      	RJMP _0xD
                 ; 0000 00A4             case 22:
                 _0x11:
00013f 31e6      	CPI  R30,LOW(0x16)
000140 e0a0      	LDI  R26,HIGH(0x16)
000141 07fa      	CPC  R31,R26
000142 f469      	BRNE _0x14
                 ; 0000 00A5                   if (temperature < 35)
                +
000143 3203     +CPI R16 , LOW ( 35 )
000144 e0e0     +LDI R30 , HIGH ( 35 )
000145 071e     +CPC R17 , R30
                 	__CPWRN 16,17,35
000146 f410      	BRSH _0x15
                 ; 0000 00A6                   {
                 ; 0000 00A7                         state = 21;
                +
000147 e125     +LDI R18 , LOW ( 21 )
000148 e030     +LDI R19 , HIGH ( 21 )
                 	__GETWRN 18,19,21
                 ; 0000 00A8                   }
                 ; 0000 00A9                   if (temperature > 45)
                 _0x15:
                +
000149 320e     +CPI R16 , LOW ( 46 )
00014a e0e0     +LDI R30 , HIGH ( 46 )
00014b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,46
00014c f010      	BRLO _0x16
                 ; 0000 00AA                   {
                 ; 0000 00AB                         state = 23;
                +
00014d e127     +LDI R18 , LOW ( 23 )
00014e e030     +LDI R19 , HIGH ( 23 )
                 	__GETWRN 18,19,23
                 ; 0000 00AC                   }
                 ; 0000 00AD                   break;
                 _0x16:
00014f c015      	RJMP _0xD
                 ; 0000 00AE             case 23:
                 _0x14:
000150 31e7      	CPI  R30,LOW(0x17)
000151 e0a0      	LDI  R26,HIGH(0x17)
000152 07fa      	CPC  R31,R26
000153 f439      	BRNE _0x17
                 ; 0000 00AF                   if (temperature < 40)
                +
000154 3208     +CPI R16 , LOW ( 40 )
000155 e0e0     +LDI R30 , HIGH ( 40 )
000156 071e     +CPC R17 , R30
                 	__CPWRN 16,17,40
000157 f410      	BRSH _0x18
                 ; 0000 00B0                   {
                 ; 0000 00B1                         state = 22;
                +
000158 e126     +LDI R18 , LOW ( 22 )
000159 e030     +LDI R19 , HIGH ( 22 )
                 	__GETWRN 18,19,22
                 ; 0000 00B2                   }
                 ; 0000 00B3                   break;
                 _0x18:
00015a c00a      	RJMP _0xD
                 ; 0000 00B4             case 3:
                 _0x17:
00015b 30e3      	CPI  R30,LOW(0x3)
00015c e0a0      	LDI  R26,HIGH(0x3)
00015d 07fa      	CPC  R31,R26
00015e f431      	BRNE _0xD
                 ; 0000 00B5                   if (temperature > 30)
                +
00015f 310f     +CPI R16 , LOW ( 31 )
000160 e0e0     +LDI R30 , HIGH ( 31 )
000161 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
000162 f010      	BRLO _0x1A
                 ; 0000 00B6                   {
                 ; 0000 00B7                         state = 1;
                +
000163 e021     +LDI R18 , LOW ( 1 )
000164 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 00B8                   }
                 ; 0000 00B9                   break;
                 _0x1A:
                 ; 0000 00BA             }
                 _0xD:
                 ; 0000 00BB             switch (state)
000165 01f9      	MOVW R30,R18
                 ; 0000 00BC             {
                 ; 0000 00BD             case 21:
000166 31e5      	CPI  R30,LOW(0x15)
000167 e0a0      	LDI  R26,HIGH(0x15)
000168 07fa      	CPC  R31,R26
000169 f431      	BRNE _0x1E
                 ; 0000 00BE                   turn_on_cooler(delay / 2);
00016a 01da      	MOVW R26,R20
00016b e0e2      	LDI  R30,LOW(2)
00016c e0f0      	LDI  R31,HIGH(2)
00016d 940e 03e8 	CALL SUBOPT_0x1
                 ; 0000 00BF                   break;
00016f c01b      	RJMP _0x1D
                 ; 0000 00C0             case 22:
                 _0x1E:
000170 31e6      	CPI  R30,LOW(0x16)
000171 e0a0      	LDI  R26,HIGH(0x16)
000172 07fa      	CPC  R31,R26
000173 f431      	BRNE _0x1F
                 ; 0000 00C1                   turn_on_cooler(delay / 6);
000174 01da      	MOVW R26,R20
000175 e0e6      	LDI  R30,LOW(6)
000176 e0f0      	LDI  R31,HIGH(6)
000177 940e 03e8 	CALL SUBOPT_0x1
                 ; 0000 00C2                   break;
000179 c011      	RJMP _0x1D
                 ; 0000 00C3             case 23:
                 _0x1F:
00017a 31e7      	CPI  R30,LOW(0x17)
00017b e0a0      	LDI  R26,HIGH(0x17)
00017c 07fa      	CPC  R31,R26
00017d f431      	BRNE _0x20
                 ; 0000 00C4                   turn_on_cooler(delay / 10);
00017e 01da      	MOVW R26,R20
00017f e0ea      	LDI  R30,LOW(10)
000180 e0f0      	LDI  R31,HIGH(10)
000181 940e 03e8 	CALL SUBOPT_0x1
                 ; 0000 00C5                   break;
000183 c007      	RJMP _0x1D
                 ; 0000 00C6             case 3:
                 _0x20:
000184 30e3      	CPI  R30,LOW(0x3)
000185 e0a0      	LDI  R26,HIGH(0x3)
000186 07fa      	CPC  R31,R26
000187 f419      	BRNE _0x1D
                 ; 0000 00C7                   _turn_on_heater(100);
000188 e6a4      	LDI  R26,LOW(100)
000189 e0b0      	LDI  R27,0
00018a defd      	RCALL __turn_on_heater
                 ; 0000 00C8                   break;
                 ; 0000 00C9             }
                 _0x1D:
                 ; 0000 00CA       }
00018b cf58      	RJMP _0x7
                 ; 0000 00CB       /* Set period in between two steps */
                 ; 0000 00CC       while (1)
                 _0x22:
                 ; 0000 00CD       {
                 ; 0000 00CE       }
00018c cfff      	RJMP _0x22
                 ; 0000 00CF }
                 _0x25:
00018d cfff      	RJMP _0x25
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000260           	.BYTE 0x15
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00018e 93ba      	ST   -Y,R27
00018f 93aa      	ST   -Y,R26
000190 931a      	ST   -Y,R17
000191 930a      	ST   -Y,R16
000192 81aa      	LDD  R26,Y+2
000193 81bb      	LDD  R27,Y+2+1
000194 9612      	ADIW R26,2
000195 940e 046b 	CALL __GETW1P
000197 9730      	SBIW R30,0
000198 f159      	BREQ _0x2000010
000199 81aa      	LDD  R26,Y+2
00019a 81bb      	LDD  R27,Y+2+1
00019b 9614      	ADIW R26,4
00019c 940e 046b 	CALL __GETW1P
00019e 018f      	MOVW R16,R30
00019f 9730      	SBIW R30,0
0001a0 f061      	BREQ _0x2000012
                +
0001a1 3002     +CPI R16 , LOW ( 2 )
0001a2 e0e0     +LDI R30 , HIGH ( 2 )
0001a3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001a4 f098      	BRLO _0x2000013
0001a5 01f8      	MOVW R30,R16
0001a6 9731      	SBIW R30,1
0001a7 018f      	MOVW R16,R30
                +
0001a8 81aa     +LDD R26 , Y + 2
0001a9 81bb     +LDD R27 , Y + 2 + 1
0001aa 9614     +ADIW R26 , 4
0001ab 93ed     +ST X + , R30
0001ac 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0001ad 81aa      	LDD  R26,Y+2
0001ae 81bb      	LDD  R27,Y+2+1
0001af 9612      	ADIW R26,2
0001b0 91ed      	LD   R30,X+
0001b1 91fd      	LD   R31,X+
0001b2 9631      	ADIW R30,1
0001b3 93fe      	ST   -X,R31
0001b4 93ee      	ST   -X,R30
0001b5 9731      	SBIW R30,1
0001b6 81ac      	LDD  R26,Y+4
0001b7 83a0      	STD  Z+0,R26
                 _0x2000013:
0001b8 81aa      	LDD  R26,Y+2
0001b9 81bb      	LDD  R27,Y+2+1
0001ba 940e 046b 	CALL __GETW1P
0001bc 23ff      	TST  R31
0001bd f02a      	BRMI _0x2000014
0001be 91ed      	LD   R30,X+
0001bf 91fd      	LD   R31,X+
0001c0 9631      	ADIW R30,1
0001c1 93fe      	ST   -X,R31
0001c2 93ee      	ST   -X,R30
                 _0x2000014:
0001c3 c006      	RJMP _0x2000015
                 _0x2000010:
0001c4 81aa      	LDD  R26,Y+2
0001c5 81bb      	LDD  R27,Y+2+1
0001c6 efef      	LDI  R30,LOW(65535)
0001c7 efff      	LDI  R31,HIGH(65535)
0001c8 93ed      	ST   X+,R30
0001c9 93fc      	ST   X,R31
                 _0x2000015:
0001ca 8119      	LDD  R17,Y+1
0001cb 8108      	LDD  R16,Y+0
0001cc 9625      	ADIW R28,5
0001cd 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001ce 93ba      	ST   -Y,R27
0001cf 93aa      	ST   -Y,R26
0001d0 9726      	SBIW R28,6
0001d1 940e 0478 	CALL __SAVELOCR6
0001d3 e010      	LDI  R17,0
0001d4 85ac      	LDD  R26,Y+12
0001d5 85bd      	LDD  R27,Y+12+1
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 e0f0      	LDI  R31,HIGH(0)
0001d8 93ed      	ST   X+,R30
0001d9 93fc      	ST   X,R31
                 _0x2000016:
0001da 89ea      	LDD  R30,Y+18
0001db 89fb      	LDD  R31,Y+18+1
0001dc 9631      	ADIW R30,1
0001dd 8bea      	STD  Y+18,R30
0001de 8bfb      	STD  Y+18+1,R31
0001df 9731      	SBIW R30,1
0001e0 91e4      	LPM  R30,Z
0001e1 2f2e      	MOV  R18,R30
0001e2 30e0      	CPI  R30,0
0001e3 f409      	BRNE PC+2
0001e4 c115      	RJMP _0x2000018
0001e5 2fe1      	MOV  R30,R17
0001e6 30e0      	CPI  R30,0
0001e7 f439      	BRNE _0x200001C
0001e8 3225      	CPI  R18,37
0001e9 f411      	BRNE _0x200001D
0001ea e011      	LDI  R17,LOW(1)
0001eb c002      	RJMP _0x200001E
                 _0x200001D:
0001ec 940e 03ed 	CALL SUBOPT_0x2
                 _0x200001E:
0001ee c10a      	RJMP _0x200001B
                 _0x200001C:
0001ef 30e1      	CPI  R30,LOW(0x1)
0001f0 f4a9      	BRNE _0x200001F
0001f1 3225      	CPI  R18,37
0001f2 f419      	BRNE _0x2000020
0001f3 940e 03ed 	CALL SUBOPT_0x2
0001f5 c102      	RJMP _0x20000CC
                 _0x2000020:
0001f6 e012      	LDI  R17,LOW(2)
0001f7 e040      	LDI  R20,LOW(0)
0001f8 e000      	LDI  R16,LOW(0)
0001f9 322d      	CPI  R18,45
0001fa f411      	BRNE _0x2000021
0001fb e001      	LDI  R16,LOW(1)
0001fc c0fc      	RJMP _0x200001B
                 _0x2000021:
0001fd 322b      	CPI  R18,43
0001fe f411      	BRNE _0x2000022
0001ff e24b      	LDI  R20,LOW(43)
000200 c0f8      	RJMP _0x200001B
                 _0x2000022:
000201 3220      	CPI  R18,32
000202 f411      	BRNE _0x2000023
000203 e240      	LDI  R20,LOW(32)
000204 c0f4      	RJMP _0x200001B
                 _0x2000023:
000205 c002      	RJMP _0x2000024
                 _0x200001F:
000206 30e2      	CPI  R30,LOW(0x2)
000207 f439      	BRNE _0x2000025
                 _0x2000024:
000208 e050      	LDI  R21,LOW(0)
000209 e013      	LDI  R17,LOW(3)
00020a 3320      	CPI  R18,48
00020b f411      	BRNE _0x2000026
00020c 6800      	ORI  R16,LOW(128)
00020d c0eb      	RJMP _0x200001B
                 _0x2000026:
00020e c003      	RJMP _0x2000027
                 _0x2000025:
00020f 30e3      	CPI  R30,LOW(0x3)
000210 f009      	BREQ PC+2
000211 c0e7      	RJMP _0x200001B
                 _0x2000027:
000212 3320      	CPI  R18,48
000213 f010      	BRLO _0x200002A
000214 332a      	CPI  R18,58
000215 f008      	BRLO _0x200002B
                 _0x200002A:
000216 c007      	RJMP _0x2000029
                 _0x200002B:
000217 e0aa      	LDI  R26,LOW(10)
000218 9f5a      	MUL  R21,R26
000219 2d50      	MOV  R21,R0
00021a 2fe2      	MOV  R30,R18
00021b 53e0      	SUBI R30,LOW(48)
00021c 0f5e      	ADD  R21,R30
00021d c0db      	RJMP _0x200001B
                 _0x2000029:
00021e 2fe2      	MOV  R30,R18
00021f 36e3      	CPI  R30,LOW(0x63)
000220 f449      	BRNE _0x200002F
000221 940e 03f4 	CALL SUBOPT_0x3
000223 89e8      	LDD  R30,Y+16
000224 89f9      	LDD  R31,Y+16+1
000225 81a4      	LDD  R26,Z+4
000226 93aa      	ST   -Y,R26
000227 940e 03fa 	CALL SUBOPT_0x4
000229 c0ce      	RJMP _0x2000030
                 _0x200002F:
00022a 37e3      	CPI  R30,LOW(0x73)
00022b f441      	BRNE _0x2000032
00022c 940e 03f4 	CALL SUBOPT_0x3
00022e 940e 0400 	CALL SUBOPT_0x5
000230 940e 03ca 	CALL _strlen
000232 2f1e      	MOV  R17,R30
000233 c00a      	RJMP _0x2000033
                 _0x2000032:
000234 37e0      	CPI  R30,LOW(0x70)
000235 f461      	BRNE _0x2000035
000236 940e 03f4 	CALL SUBOPT_0x3
000238 940e 0400 	CALL SUBOPT_0x5
00023a 940e 03d6 	CALL _strlenf
00023c 2f1e      	MOV  R17,R30
00023d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00023e 6002      	ORI  R16,LOW(2)
00023f 770f      	ANDI R16,LOW(127)
000240 e030      	LDI  R19,LOW(0)
000241 c034      	RJMP _0x2000036
                 _0x2000035:
000242 36e4      	CPI  R30,LOW(0x64)
000243 f011      	BREQ _0x2000039
000244 36e9      	CPI  R30,LOW(0x69)
000245 f411      	BRNE _0x200003A
                 _0x2000039:
000246 6004      	ORI  R16,LOW(4)
000247 c002      	RJMP _0x200003B
                 _0x200003A:
000248 37e5      	CPI  R30,LOW(0x75)
000249 f431      	BRNE _0x200003C
                 _0x200003B:
00024a e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00024b e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00024c 83ee      	STD  Y+6,R30
00024d 83ff      	STD  Y+6+1,R31
00024e e015      	LDI  R17,LOW(5)
00024f c00c      	RJMP _0x200003D
                 _0x200003C:
000250 35e8      	CPI  R30,LOW(0x58)
000251 f411      	BRNE _0x200003F
000252 6008      	ORI  R16,LOW(8)
000253 c003      	RJMP _0x2000040
                 _0x200003F:
000254 37e8      	CPI  R30,LOW(0x78)
000255 f009      	BREQ PC+2
000256 c0a1      	RJMP _0x2000071
                 _0x2000040:
000257 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000258 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000259 83ee      	STD  Y+6,R30
00025a 83ff      	STD  Y+6+1,R31
00025b e014      	LDI  R17,LOW(4)
                 _0x200003D:
00025c ff02      	SBRS R16,2
00025d c014      	RJMP _0x2000042
00025e 940e 03f4 	CALL SUBOPT_0x3
000260 940e 040a 	CALL SUBOPT_0x6
000262 85ab      	LDD  R26,Y+11
000263 23aa      	TST  R26
000264 f43a      	BRPL _0x2000043
000265 85ea      	LDD  R30,Y+10
000266 85fb      	LDD  R31,Y+10+1
000267 940e 043c 	CALL __ANEGW1
000269 87ea      	STD  Y+10,R30
00026a 87fb      	STD  Y+10+1,R31
00026b e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00026c 3040      	CPI  R20,0
00026d f011      	BREQ _0x2000044
00026e 5f1f      	SUBI R17,-LOW(1)
00026f c001      	RJMP _0x2000045
                 _0x2000044:
000270 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000271 c004      	RJMP _0x2000046
                 _0x2000042:
000272 940e 03f4 	CALL SUBOPT_0x3
000274 940e 040a 	CALL SUBOPT_0x6
                 _0x2000046:
                 _0x2000036:
000276 fd00      	SBRC R16,0
000277 c011      	RJMP _0x2000047
                 _0x2000048:
000278 1715      	CP   R17,R21
000279 f478      	BRSH _0x200004A
00027a ff07      	SBRS R16,7
00027b c008      	RJMP _0x200004B
00027c ff02      	SBRS R16,2
00027d c004      	RJMP _0x200004C
00027e 7f0b      	ANDI R16,LOW(251)
00027f 2f24      	MOV  R18,R20
000280 5011      	SUBI R17,LOW(1)
000281 c001      	RJMP _0x200004D
                 _0x200004C:
000282 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000283 c001      	RJMP _0x200004E
                 _0x200004B:
000284 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000285 940e 03ed 	CALL SUBOPT_0x2
000287 5051      	SUBI R21,LOW(1)
000288 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000289 2f31      	MOV  R19,R17
00028a ff01      	SBRS R16,1
00028b c017      	RJMP _0x200004F
                 _0x2000050:
00028c 3030      	CPI  R19,0
00028d f0a1      	BREQ _0x2000052
00028e ff03      	SBRS R16,3
00028f c006      	RJMP _0x2000053
000290 81ee      	LDD  R30,Y+6
000291 81ff      	LDD  R31,Y+6+1
000292 9125      	LPM  R18,Z+
000293 83ee      	STD  Y+6,R30
000294 83ff      	STD  Y+6+1,R31
000295 c005      	RJMP _0x2000054
                 _0x2000053:
000296 81ae      	LDD  R26,Y+6
000297 81bf      	LDD  R27,Y+6+1
000298 912d      	LD   R18,X+
000299 83ae      	STD  Y+6,R26
00029a 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00029b 940e 03ed 	CALL SUBOPT_0x2
00029d 3050      	CPI  R21,0
00029e f009      	BREQ _0x2000055
00029f 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0002a0 5031      	SUBI R19,LOW(1)
0002a1 cfea      	RJMP _0x2000050
                 _0x2000052:
0002a2 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0002a3 e320      	LDI  R18,LOW(48)
0002a4 81ee      	LDD  R30,Y+6
0002a5 81ff      	LDD  R31,Y+6+1
0002a6 940e 046f 	CALL __GETW1PF
0002a8 87e8      	STD  Y+8,R30
0002a9 87f9      	STD  Y+8+1,R31
0002aa 81ee      	LDD  R30,Y+6
0002ab 81ff      	LDD  R31,Y+6+1
0002ac 9632      	ADIW R30,2
0002ad 83ee      	STD  Y+6,R30
0002ae 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0002af 85e8      	LDD  R30,Y+8
0002b0 85f9      	LDD  R31,Y+8+1
0002b1 85aa      	LDD  R26,Y+10
0002b2 85bb      	LDD  R27,Y+10+1
0002b3 17ae      	CP   R26,R30
0002b4 07bf      	CPC  R27,R31
0002b5 f050      	BRLO _0x200005C
0002b6 5f2f      	SUBI R18,-LOW(1)
0002b7 85a8      	LDD  R26,Y+8
0002b8 85b9      	LDD  R27,Y+8+1
0002b9 85ea      	LDD  R30,Y+10
0002ba 85fb      	LDD  R31,Y+10+1
0002bb 1bea      	SUB  R30,R26
0002bc 0bfb      	SBC  R31,R27
0002bd 87ea      	STD  Y+10,R30
0002be 87fb      	STD  Y+10+1,R31
0002bf cfef      	RJMP _0x200005A
                 _0x200005C:
0002c0 332a      	CPI  R18,58
0002c1 f028      	BRLO _0x200005D
0002c2 ff03      	SBRS R16,3
0002c3 c002      	RJMP _0x200005E
0002c4 5f29      	SUBI R18,-LOW(7)
0002c5 c001      	RJMP _0x200005F
                 _0x200005E:
0002c6 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0002c7 fd04      	SBRC R16,4
0002c8 c01a      	RJMP _0x2000061
0002c9 3321      	CPI  R18,49
0002ca f420      	BRSH _0x2000063
0002cb 85a8      	LDD  R26,Y+8
0002cc 85b9      	LDD  R27,Y+8+1
0002cd 9711      	SBIW R26,1
0002ce f409      	BRNE _0x2000062
                 _0x2000063:
0002cf c009      	RJMP _0x20000CD
                 _0x2000062:
0002d0 1753      	CP   R21,R19
0002d1 f010      	BRLO _0x2000067
0002d2 ff00      	SBRS R16,0
0002d3 c001      	RJMP _0x2000068
                 _0x2000067:
0002d4 c013      	RJMP _0x2000066
                 _0x2000068:
0002d5 e220      	LDI  R18,LOW(32)
0002d6 ff07      	SBRS R16,7
0002d7 c00b      	RJMP _0x2000069
0002d8 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002d9 6100      	ORI  R16,LOW(16)
0002da ff02      	SBRS R16,2
0002db c007      	RJMP _0x200006A
0002dc 7f0b      	ANDI R16,LOW(251)
0002dd 934a      	ST   -Y,R20
0002de 940e 03fa 	CALL SUBOPT_0x4
0002e0 3050      	CPI  R21,0
0002e1 f009      	BREQ _0x200006B
0002e2 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002e3 940e 03ed 	CALL SUBOPT_0x2
0002e5 3050      	CPI  R21,0
0002e6 f009      	BREQ _0x200006C
0002e7 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002e8 5031      	SUBI R19,LOW(1)
0002e9 85a8      	LDD  R26,Y+8
0002ea 85b9      	LDD  R27,Y+8+1
0002eb 9712      	SBIW R26,2
0002ec f008      	BRLO _0x2000059
0002ed cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002ee ff00      	SBRS R16,0
0002ef c008      	RJMP _0x200006D
                 _0x200006E:
0002f0 3050      	CPI  R21,0
0002f1 f031      	BREQ _0x2000070
0002f2 5051      	SUBI R21,LOW(1)
0002f3 e2e0      	LDI  R30,LOW(32)
0002f4 93ea      	ST   -Y,R30
0002f5 940e 03fa 	CALL SUBOPT_0x4
0002f7 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002f8 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002f9 cee0      	RJMP _0x2000016
                 _0x2000018:
0002fa 85ac      	LDD  R26,Y+12
0002fb 85bd      	LDD  R27,Y+12+1
0002fc 940e 046b 	CALL __GETW1P
0002fe 940e 047f 	CALL __LOADLOCR6
000300 9664      	ADIW R28,20
000301 9508      	RET
                 ; .FEND
                 _snprintf:
                 ; .FSTART _snprintf
000302 92ff      	PUSH R15
000303 2ef8      	MOV  R15,R24
000304 9726      	SBIW R28,6
000305 940e 047a 	CALL __SAVELOCR4
                +
000307 e020     +LDI R18 , LOW ( 0 )
000308 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000309 940e 0412 	CALL SUBOPT_0x7
00030b 9730      	SBIW R30,0
00030c f419      	BRNE _0x2000073
00030d efef      	LDI  R30,LOW(65535)
00030e efff      	LDI  R31,HIGH(65535)
00030f c028      	RJMP _0x2080003
                 _0x2000073:
000310 940e 0419 	CALL SUBOPT_0x8
000312 9730      	SBIW R30,0
000313 f119      	BREQ _0x2000074
000314 01de      	MOVW R26,R28
000315 9616      	ADIW R26,6
000316 940e 0438 	CALL __ADDW2R15
000318 018d      	MOVW R16,R26
000319 940e 0412 	CALL SUBOPT_0x7
00031b 83ee      	STD  Y+6,R30
00031c 83ff      	STD  Y+6+1,R31
00031d 940e 0419 	CALL SUBOPT_0x8
00031f 87e8      	STD  Y+8,R30
000320 87f9      	STD  Y+8+1,R31
000321 01de      	MOVW R26,R28
000322 961a      	ADIW R26,10
000323 940e 0438 	CALL __ADDW2R15
000325 940e 046b 	CALL __GETW1P
000327 93fa      	ST   -Y,R31
000328 93ea      	ST   -Y,R30
000329 931a      	ST   -Y,R17
00032a 930a      	ST   -Y,R16
00032b e8ee      	LDI  R30,LOW(_put_buff_G100)
00032c e0f1      	LDI  R31,HIGH(_put_buff_G100)
00032d 93fa      	ST   -Y,R31
00032e 93ea      	ST   -Y,R30
00032f 01de      	MOVW R26,R28
000330 961a      	ADIW R26,10
000331 de9c      	RCALL __print_G100
000332 019f      	MOVW R18,R30
000333 81ae      	LDD  R26,Y+6
000334 81bf      	LDD  R27,Y+6+1
000335 e0e0      	LDI  R30,LOW(0)
000336 93ec      	ST   X,R30
                 _0x2000074:
000337 01f9      	MOVW R30,R18
                 _0x2080003:
000338 940e 0481 	CALL __LOADLOCR4
00033a 962a      	ADIW R28,10
00033b 90ff      	POP  R15
00033c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00033d 93aa      	ST   -Y,R26
00033e b3e5      	IN   R30,0x15
00033f 70ef      	ANDI R30,LOW(0xF)
000340 2fae      	MOV  R26,R30
000341 81e8      	LD   R30,Y
000342 7fe0      	ANDI R30,LOW(0xF0)
000343 2bea      	OR   R30,R26
000344 bbe5      	OUT  0x15,R30
                +
000345 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000346 958a     +DEC R24
000347 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000348 9aaa      	SBI  0x15,2
                +
000349 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00034a 958a     +DEC R24
00034b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00034c 98aa      	CBI  0x15,2
                +
00034d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00034e 958a     +DEC R24
00034f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000350 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000351 93aa      	ST   -Y,R26
000352 81a8      	LD   R26,Y
000353 dfe9      	RCALL __lcd_write_nibble_G101
000354 81e8          ld    r30,y
000355 95e2          swap  r30
000356 83e8          st    y,r30
000357 81a8      	LD   R26,Y
000358 dfe4      	RCALL __lcd_write_nibble_G101
                +
000359 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00035a 958a     +DEC R24
00035b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00035c c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00035d 93aa      	ST   -Y,R26
00035e 81e8      	LD   R30,Y
00035f e0f0      	LDI  R31,0
000360 58eb      	SUBI R30,LOW(-__base_y_G101)
000361 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000362 81e0      	LD   R30,Z
000363 81a9      	LDD  R26,Y+1
000364 0fae      	ADD  R26,R30
000365 dfeb      	RCALL __lcd_write_data
000366 8059      	LDD  R5,Y+1
000367 8048      	LDD  R4,Y+0
                 _0x2080002:
000368 9622      	ADIW R28,2
000369 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00036a e0a2      	LDI  R26,LOW(2)
00036b 940e 0420 	CALL SUBOPT_0x9
00036d e0ac      	LDI  R26,LOW(12)
00036e dfe2      	RCALL __lcd_write_data
00036f e0a1      	LDI  R26,LOW(1)
000370 940e 0420 	CALL SUBOPT_0x9
000372 e0e0      	LDI  R30,LOW(0)
000373 2e4e      	MOV  R4,R30
000374 2e5e      	MOV  R5,R30
000375 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000376 93aa      	ST   -Y,R26
000377 81a8      	LD   R26,Y
000378 30aa      	CPI  R26,LOW(0xA)
000379 f011      	BREQ _0x2020005
00037a 1457      	CP   R5,R7
00037b f048      	BRLO _0x2020004
                 _0x2020005:
00037c e0e0      	LDI  R30,LOW(0)
00037d 93ea      	ST   -Y,R30
00037e 9443      	INC  R4
00037f 2da4      	MOV  R26,R4
000380 dfdc      	RCALL _lcd_gotoxy
000381 81a8      	LD   R26,Y
000382 30aa      	CPI  R26,LOW(0xA)
000383 f409      	BRNE _0x2020007
000384 c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000385 9453      	INC  R5
000386 9aa8      	SBI  0x15,0
000387 81a8      	LD   R26,Y
000388 dfc8      	RCALL __lcd_write_data
000389 98a8      	CBI  0x15,0
00038a c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00038b 93ba      	ST   -Y,R27
00038c 93aa      	ST   -Y,R26
00038d 931a      	ST   -Y,R17
                 _0x2020008:
00038e 81a9      	LDD  R26,Y+1
00038f 81ba      	LDD  R27,Y+1+1
000390 91ed      	LD   R30,X+
000391 83a9      	STD  Y+1,R26
000392 83ba      	STD  Y+1+1,R27
000393 2f1e      	MOV  R17,R30
000394 30e0      	CPI  R30,0
000395 f019      	BREQ _0x202000A
000396 2fa1      	MOV  R26,R17
000397 dfde      	RCALL _lcd_putchar
000398 cff5      	RJMP _0x2020008
                 _0x202000A:
000399 8118      	LDD  R17,Y+0
00039a 9623      	ADIW R28,3
00039b 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00039c 93aa      	ST   -Y,R26
00039d b3e4      	IN   R30,0x14
00039e 6fe0      	ORI  R30,LOW(0xF0)
00039f bbe4      	OUT  0x14,R30
0003a0 9aa2      	SBI  0x14,2
0003a1 9aa0      	SBI  0x14,0
0003a2 9aa1      	SBI  0x14,1
0003a3 98aa      	CBI  0x15,2
0003a4 98a8      	CBI  0x15,0
0003a5 98a9      	CBI  0x15,1
0003a6 8078      	LDD  R7,Y+0
0003a7 81e8      	LD   R30,Y
0003a8 58e0      	SUBI R30,-LOW(128)
                +
0003a9 93e0 0277+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0003ab 81e8      	LD   R30,Y
0003ac 54e0      	SUBI R30,-LOW(192)
                +
0003ad 93e0 0278+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0003af e1a4      	LDI  R26,LOW(20)
0003b0 e0b0      	LDI  R27,0
0003b1 940e 042e 	CALL _delay_ms
0003b3 940e 0426 	CALL SUBOPT_0xA
0003b5 940e 0426 	CALL SUBOPT_0xA
0003b7 940e 0426 	CALL SUBOPT_0xA
0003b9 e2a0      	LDI  R26,LOW(32)
0003ba df82      	RCALL __lcd_write_nibble_G101
                +
0003bb ec88     +LDI R24 , LOW ( 200 )
0003bc e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003bd 9701     +SBIW R24 , 1
0003be f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003bf e2a8      	LDI  R26,LOW(40)
0003c0 df90      	RCALL __lcd_write_data
0003c1 e0a4      	LDI  R26,LOW(4)
0003c2 df8e      	RCALL __lcd_write_data
0003c3 e8a5      	LDI  R26,LOW(133)
0003c4 df8c      	RCALL __lcd_write_data
0003c5 e0a6      	LDI  R26,LOW(6)
0003c6 df8a      	RCALL __lcd_write_data
0003c7 dfa2      	RCALL _lcd_clear
                 _0x2080001:
0003c8 9621      	ADIW R28,1
0003c9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003ca 93ba      	ST   -Y,R27
0003cb 93aa      	ST   -Y,R26
0003cc 91a9          ld   r26,y+
0003cd 91b9          ld   r27,y+
0003ce 27ee          clr  r30
0003cf 27ff          clr  r31
                 strlen0:
0003d0 916d          ld   r22,x+
0003d1 2366          tst  r22
0003d2 f011          breq strlen1
0003d3 9631          adiw r30,1
0003d4 cffb          rjmp strlen0
                 strlen1:
0003d5 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003d6 93ba      	ST   -Y,R27
0003d7 93aa      	ST   -Y,R26
0003d8 27aa          clr  r26
0003d9 27bb          clr  r27
0003da 91e9          ld   r30,y+
0003db 91f9          ld   r31,y+
                 strlenf0:
0003dc 9005      	lpm  r0,z+
0003dd 2000          tst  r0
0003de f011          breq strlenf1
0003df 9611          adiw r26,1
0003e0 cffb          rjmp strlenf0
                 strlenf1:
0003e1 01fd          movw r30,r26
0003e2 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000275           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x0:
0003e3 bbe2      	OUT  0x12,R30
0003e4 81a8      	LD   R26,Y
0003e5 81b9      	LDD  R27,Y+1
0003e6 940c 042e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0003e8 940e 0458 	CALL __DIVW21
0003ea 01df      	MOVW R26,R30
0003eb 940c 00a7 	JMP  _turn_on_cooler
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
0003ed 932a      	ST   -Y,R18
0003ee 85ad      	LDD  R26,Y+13
0003ef 85be      	LDD  R27,Y+13+1
0003f0 85ef      	LDD  R30,Y+15
0003f1 89f8      	LDD  R31,Y+15+1
0003f2 9509      	ICALL
0003f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0003f4 89e8      	LDD  R30,Y+16
0003f5 89f9      	LDD  R31,Y+16+1
0003f6 9734      	SBIW R30,4
0003f7 8be8      	STD  Y+16,R30
0003f8 8bf9      	STD  Y+16+1,R31
0003f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0003fa 85ad      	LDD  R26,Y+13
0003fb 85be      	LDD  R27,Y+13+1
0003fc 85ef      	LDD  R30,Y+15
0003fd 89f8      	LDD  R31,Y+15+1
0003fe 9509      	ICALL
0003ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000400 89a8      	LDD  R26,Y+16
000401 89b9      	LDD  R27,Y+16+1
000402 9614      	ADIW R26,4
000403 940e 046b 	CALL __GETW1P
000405 83ee      	STD  Y+6,R30
000406 83ff      	STD  Y+6+1,R31
000407 81ae      	LDD  R26,Y+6
000408 81bf      	LDD  R27,Y+6+1
000409 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00040a 89a8      	LDD  R26,Y+16
00040b 89b9      	LDD  R27,Y+16+1
00040c 9614      	ADIW R26,4
00040d 940e 046b 	CALL __GETW1P
00040f 87ea      	STD  Y+10,R30
000410 87fb      	STD  Y+10+1,R31
000411 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000412 01de      	MOVW R26,R28
000413 961e      	ADIW R26,14
000414 940e 0438 	CALL __ADDW2R15
000416 940e 046b 	CALL __GETW1P
000418 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000419 01de      	MOVW R26,R28
00041a 961c      	ADIW R26,12
00041b 940e 0438 	CALL __ADDW2R15
00041d 940e 046b 	CALL __GETW1P
00041f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000420 940e 0351 	CALL __lcd_write_data
000422 e0a3      	LDI  R26,LOW(3)
000423 e0b0      	LDI  R27,0
000424 940c 042e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
000426 e3a0      	LDI  R26,LOW(48)
000427 940e 033d 	CALL __lcd_write_nibble_G101
                +
000429 ec88     +LDI R24 , LOW ( 200 )
00042a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00042b 9701     +SBIW R24 , 1
00042c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00042d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00042e 9610      	adiw r26,0
00042f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000430 ed80     +LDI R24 , LOW ( 0x7D0 )
000431 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000432 9701     +SBIW R24 , 1
000433 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000434 95a8      	wdr
000435 9711      	sbiw r26,1
000436 f7c9      	brne __delay_ms0
                 __delay_ms1:
000437 9508      	ret
                 
                 __ADDW2R15:
000438 2400      	CLR  R0
000439 0daf      	ADD  R26,R15
00043a 1db0      	ADC  R27,R0
00043b 9508      	RET
                 
                 __ANEGW1:
00043c 95f1      	NEG  R31
00043d 95e1      	NEG  R30
00043e 40f0      	SBCI R31,0
00043f 9508      	RET
                 
                 __LSRW2:
000440 95f6      	LSR  R31
000441 95e7      	ROR  R30
000442 95f6      	LSR  R31
000443 95e7      	ROR  R30
000444 9508      	RET
                 
                 __DIVW21U:
000445 2400      	CLR  R0
000446 2411      	CLR  R1
000447 e190      	LDI  R25,16
                 __DIVW21U1:
000448 0faa      	LSL  R26
000449 1fbb      	ROL  R27
00044a 1c00      	ROL  R0
00044b 1c11      	ROL  R1
00044c 1a0e      	SUB  R0,R30
00044d 0a1f      	SBC  R1,R31
00044e f418      	BRCC __DIVW21U2
00044f 0e0e      	ADD  R0,R30
000450 1e1f      	ADC  R1,R31
000451 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000452 60a1      	SBR  R26,1
                 __DIVW21U3:
000453 959a      	DEC  R25
000454 f799      	BRNE __DIVW21U1
000455 01fd      	MOVW R30,R26
000456 01d0      	MOVW R26,R0
000457 9508      	RET
                 
                 __DIVW21:
000458 d004      	RCALL __CHKSIGNW
000459 dfeb      	RCALL __DIVW21U
00045a f40e      	BRTC __DIVW211
00045b dfe0      	RCALL __ANEGW1
                 __DIVW211:
00045c 9508      	RET
                 
                 __CHKSIGNW:
00045d 94e8      	CLT
00045e fff7      	SBRS R31,7
00045f c002      	RJMP __CHKSW1
000460 dfdb      	RCALL __ANEGW1
000461 9468      	SET
                 __CHKSW1:
000462 ffb7      	SBRS R27,7
000463 c006      	RJMP __CHKSW2
000464 95a0      	COM  R26
000465 95b0      	COM  R27
000466 9611      	ADIW R26,1
000467 f800      	BLD  R0,0
000468 9403      	INC  R0
000469 fa00      	BST  R0,0
                 __CHKSW2:
00046a 9508      	RET
                 
                 __GETW1P:
00046b 91ed      	LD   R30,X+
00046c 91fc      	LD   R31,X
00046d 9711      	SBIW R26,1
00046e 9508      	RET
                 
                 __GETW1PF:
00046f 9005      	LPM  R0,Z+
000470 91f4      	LPM  R31,Z
000471 2de0      	MOV  R30,R0
000472 9508      	RET
                 
                 __PUTPARD1:
000473 937a      	ST   -Y,R23
000474 936a      	ST   -Y,R22
000475 93fa      	ST   -Y,R31
000476 93ea      	ST   -Y,R30
000477 9508      	RET
                 
                 __SAVELOCR6:
000478 935a      	ST   -Y,R21
                 __SAVELOCR5:
000479 934a      	ST   -Y,R20
                 __SAVELOCR4:
00047a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00047b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00047c 931a      	ST   -Y,R17
00047d 930a      	ST   -Y,R16
00047e 9508      	RET
                 
                 __LOADLOCR6:
00047f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000480 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000481 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000482 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000483 8119      	LDD  R17,Y+1
000484 8108      	LD   R16,Y
000485 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  19 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  45 r17:  33 r18:  41 r19:  18 r20:  13 r21:  18 r22:   6 r23:   2 
r24:  25 r25:   7 r26: 142 r27:  48 r28:  18 r29:   1 r30: 223 r31:  77 
x  :  23 y  : 178 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   0 brmi  :   1 brne  :  41 brpl  :   1 brsh  :   7 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  85 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   4 cpc   :  20 cpi   :  51 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   3 jmp   :  28 ld    :  27 ldd   :  78 ldi   : 170 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   2 mov   :  17 movw  :  27 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  16 pop   :   1 push  :   1 rcall :  20 ret   :  29 
reti  :   0 rjmp  :  71 rol   :   3 ror   :   2 sbc   :   2 sbci  :   2 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :  21 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  68 std   :  31 sts   :   2 sub   :   2 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00090c   2248     68   2316   32768   7.1%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
