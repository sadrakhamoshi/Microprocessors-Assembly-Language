;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdio.h>
;#include <delay.h>
;
;void response(void)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0008     DDRD .0 = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0009     while (PIND .0 == 1)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000A         ;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000B     while (PIND .0 == 0)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 000C         ;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 000D     while (PIND .0 == 1)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 000E         ;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 000F }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void request(void)
; 0000 0012 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0013     DDRD .0 = 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0014     PORTD .0 = 0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0015     delay_ms(30);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0016     PORTD .0 = 1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0017 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;unsigned char reed_dht11(void)
; 0000 001A {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001B     char counter_bit = 0, data = 0;
; 0000 001C     while (counter_bit < 8)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;	counter_bit -> R17
;	data -> R16
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 001D     {
; 0000 001E         counter_bit++;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 001F         while (PIND .0 == 0)
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0020             ;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0021         delay_us(40);
;PCODE: $00000046 VOL: 0
; 0000 0022         if (PIND .0 == 1)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0023         {
; 0000 0024             data = (data << 1) | (0x01);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0025         }
; 0000 0026         else
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0027         {
; 0000 0028             data = data << 1;
;PCODE: $00000050 VOL: 0
; 0000 0029         }
;PCODE: $00000051 VOL: 0
; 0000 002A         while (PIND .0 == 1)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 002B             ;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 002C     }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 002D 
; 0000 002E     return data;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 002F }
;PCODE: $0000005D VOL: 0
;
;void main(void)
; 0000 0032 {
;PCODE: $0000005E VOL: 0
; 0000 0033     char buffer[16], sum = 0, temp_int = 0, hum_int = 0, temp_dec = 0, hum_dec = 0;
; 0000 0034 
; 0000 0035     DDRB .1 = 1;
;PCODE: $0000005F VOL: 0
;	buffer -> Y+0
;	sum -> R17
;	temp_int -> R16
;	hum_int -> R19
;	temp_dec -> R18
;	hum_dec -> R21
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0036     PORTB .1 = 0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0037 
; 0000 0038     lcd_init(16);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0039     delay_ms(500);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003A 
; 0000 003B     while (1)
;PCODE: $00000072 VOL: 0
; 0000 003C     {
; 0000 003D         request();
;PCODE: $00000073 VOL: 0
; 0000 003E         response();
;PCODE: $00000074 VOL: 0
; 0000 003F         hum_int = reed_dht11();
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0040         hum_dec = reed_dht11();
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0041         temp_int = reed_dht11();
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0042         temp_dec = reed_dht11();
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0043         sum = reed_dht11();
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0044 
; 0000 0045         if (hum_int + hum_dec + temp_int + temp_dec != sum)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0046             continue;
;PCODE: $00000088 VOL: 0
; 0000 0047 
; 0000 0048         sprintf(buffer, "H:%d %% ", hum_int);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0049         lcd_gotoxy(0, 0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 004A         lcd_puts(buffer);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 004B         if (hum_int < 40 || hum_int > 60)
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 004C             PORTB .1 = 1;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 004D         else
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 004E             PORTB .1 = 0;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 004F     }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0050 }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
