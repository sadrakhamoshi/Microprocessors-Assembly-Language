
AVRASM ver. 2.1.30  D:\university\4001\rizpar\hw6\question4\software\Debug\List\program.asm Thu Jan 27 06:36:29 2022

D:\university\4001\rizpar\hw6\question4\software\Debug\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\university\4001\rizpar\hw6\question4\software\Debug\List\program.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\university\4001\rizpar\hw6\question4\software\Debug\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 3a48
000034 6425
000035 2520
000036 2025      	.DB  0x48,0x3A,0x25,0x64,0x20,0x25,0x25,0x20
D:\university\4001\rizpar\hw6\question4\software\Debug\List\program.asm(1129): warning: .cseg .db misalignment - padding zero byte
000037 0000      	.DB  0x0
                 _0x2000003:
000038 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000039 0002      	.DW  0x02
00003a 0260      	.DW  __base_y_G100
00003b 0070      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bffb      	OUT  GICR,R31
000042 bfeb      	OUT  GICR,R30
000043 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000044 e08d      	LDI  R24,(14-2)+1
000045 e0a2      	LDI  R26,2
000046 27bb      	CLR  R27
                 __CLEAR_REG:
000047 93ed      	ST   X+,R30
000048 958a      	DEC  R24
000049 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000050 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000051 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000052 9185      	LPM  R24,Z+
000053 9195      	LPM  R25,Z+
000054 9700      	SBIW R24,0
000055 f061      	BREQ __GLOBAL_INI_END
000056 91a5      	LPM  R26,Z+
000057 91b5      	LPM  R27,Z+
000058 9005      	LPM  R0,Z+
000059 9015      	LPM  R1,Z+
00005a 01bf      	MOVW R22,R30
00005b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005c 9005      	LPM  R0,Z+
00005d 920d      	ST   X+,R0
00005e 9701      	SBIW R24,1
00005f f7e1      	BRNE __GLOBAL_INI_LOOP
000060 01fb      	MOVW R30,R22
000061 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000062 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000063 bfed      	OUT  SPL,R30
000064 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000065 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000066 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000067 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000068 940c 0095 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;void response(void)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _response:
                 ; .FSTART _response
                 ; 0000 0008     DDRD .0 = 0;
00006a 9888      	CBI  0x11,0
                 ; 0000 0009     while (PIND .0 == 1)
                 _0x5:
00006b 9980      	SBIC 0x10,0
                 ; 0000 000A         ;
00006c cffe      	RJMP _0x5
                 ; 0000 000B     while (PIND .0 == 0)
                 _0x8:
00006d 9b80      	SBIS 0x10,0
                 ; 0000 000C         ;
00006e cffe      	RJMP _0x8
                 ; 0000 000D     while (PIND .0 == 1)
                 _0xB:
00006f 9980      	SBIC 0x10,0
                 ; 0000 000E         ;
000070 cffe      	RJMP _0xB
                 ; 0000 000F }
000071 9508      	RET
                 ; .FEND
                 ;
                 ;void request(void)
                 ; 0000 0012 {
                 _request:
                 ; .FSTART _request
                 ; 0000 0013     DDRD .0 = 1;
000072 9a88      	SBI  0x11,0
                 ; 0000 0014     PORTD .0 = 0;
000073 9890      	CBI  0x12,0
                 ; 0000 0015     delay_ms(30);
000074 e1ae      	LDI  R26,LOW(30)
000075 e0b0      	LDI  R27,0
000076 940e 0367 	CALL _delay_ms
                 ; 0000 0016     PORTD .0 = 1;
000078 9a90      	SBI  0x12,0
                 ; 0000 0017 }
000079 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char reed_dht11(void)
                 ; 0000 001A {
                 _reed_dht11:
                 ; .FSTART _reed_dht11
                 ; 0000 001B     char counter_bit = 0, data = 0;
                 ; 0000 001C     while (counter_bit < 8)
00007a 931a      	ST   -Y,R17
00007b 930a      	ST   -Y,R16
                 ;	counter_bit -> R17
                 ;	data -> R16
00007c e010      	LDI  R17,0
00007d e000      	LDI  R16,0
                 _0x14:
00007e 3018      	CPI  R17,8
00007f f488      	BRSH _0x16
                 ; 0000 001D     {
                 ; 0000 001E         counter_bit++;
000080 5f1f      	SUBI R17,-1
                 ; 0000 001F         while (PIND .0 == 0)
                 _0x17:
000081 9b80      	SBIS 0x10,0
                 ; 0000 0020             ;
000082 cffe      	RJMP _0x17
                 ; 0000 0021         delay_us(40);
                +
000083 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
000084 958a     +DEC R24
000085 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 0022         if (PIND .0 == 1)
000086 9b80      	SBIS 0x10,0
000087 c005      	RJMP _0x1A
                 ; 0000 0023         {
                 ; 0000 0024             data = (data << 1) | (0x01);
000088 2fe0      	MOV  R30,R16
000089 0fee      	LSL  R30
00008a 60e1      	ORI  R30,1
00008b 2f0e      	MOV  R16,R30
                 ; 0000 0025         }
                 ; 0000 0026         else
00008c c001      	RJMP _0x1B
                 _0x1A:
                 ; 0000 0027         {
                 ; 0000 0028             data = data << 1;
00008d 0f00      	LSL  R16
                 ; 0000 0029         }
                 _0x1B:
                 ; 0000 002A         while (PIND .0 == 1)
                 _0x1C:
00008e 9980      	SBIC 0x10,0
                 ; 0000 002B             ;
00008f cffe      	RJMP _0x1C
                 ; 0000 002C     }
000090 cfed      	RJMP _0x14
                 _0x16:
                 ; 0000 002D 
                 ; 0000 002E     return data;
000091 2fe0      	MOV  R30,R16
000092 9109      	LD   R16,Y+
000093 9119      	LD   R17,Y+
000094 9508      	RET
                 ; 0000 002F }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0032 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0033     char buffer[16], sum = 0, temp_int = 0, hum_int = 0, temp_dec = 0, hum_dec = 0;
                 ; 0000 0034 
                 ; 0000 0035     DDRB .1 = 1;
000095 9760      	SBIW R28,16
                 ;	buffer -> Y+0
                 ;	sum -> R17
                 ;	temp_int -> R16
                 ;	hum_int -> R19
                 ;	temp_dec -> R18
                 ;	hum_dec -> R21
000096 e010      	LDI  R17,0
000097 e000      	LDI  R16,0
000098 e030      	LDI  R19,0
000099 e020      	LDI  R18,0
00009a e050      	LDI  R21,0
00009b 9ab9      	SBI  0x17,1
                 ; 0000 0036     PORTB .1 = 0;
00009c 98c1      	CBI  0x18,1
                 ; 0000 0037 
                 ; 0000 0038     lcd_init(16);
00009d e1a0      	LDI  R26,LOW(16)
00009e d09f      	RCALL _lcd_init
                 ; 0000 0039     delay_ms(500);
00009f efa4      	LDI  R26,LOW(500)
0000a0 e0b1      	LDI  R27,HIGH(500)
0000a1 940e 0367 	CALL _delay_ms
                 ; 0000 003A 
                 ; 0000 003B     while (1)
                 _0x23:
                 ; 0000 003C     {
                 ; 0000 003D         request();
0000a3 dfce      	RCALL _request
                 ; 0000 003E         response();
0000a4 dfc5      	RCALL _response
                 ; 0000 003F         hum_int = reed_dht11();
0000a5 dfd4      	RCALL _reed_dht11
0000a6 2f3e      	MOV  R19,R30
                 ; 0000 0040         hum_dec = reed_dht11();
0000a7 dfd2      	RCALL _reed_dht11
0000a8 2f5e      	MOV  R21,R30
                 ; 0000 0041         temp_int = reed_dht11();
0000a9 dfd0      	RCALL _reed_dht11
0000aa 2f0e      	MOV  R16,R30
                 ; 0000 0042         temp_dec = reed_dht11();
0000ab dfce      	RCALL _reed_dht11
0000ac 2f2e      	MOV  R18,R30
                 ; 0000 0043         sum = reed_dht11();
0000ad dfcc      	RCALL _reed_dht11
0000ae 2f1e      	MOV  R17,R30
                 ; 0000 0044 
                 ; 0000 0045         if (hum_int + hum_dec + temp_int + temp_dec != sum)
0000af 2fa3      	MOV  R26,R19
0000b0 27bb      	CLR  R27
0000b1 27ee      	CLR  R30
0000b2 0fa5      	ADD  R26,R21
0000b3 1fbe      	ADC  R27,R30
0000b4 27ee      	CLR  R30
0000b5 0fa0      	ADD  R26,R16
0000b6 1fbe      	ADC  R27,R30
0000b7 27ee      	CLR  R30
0000b8 0fa2      	ADD  R26,R18
0000b9 1fbe      	ADC  R27,R30
0000ba 2fe1      	MOV  R30,R17
0000bb e0f0      	LDI  R31,0
0000bc 17ea      	CP   R30,R26
0000bd 07fb      	CPC  R31,R27
0000be f721      	BRNE _0x23
                 ; 0000 0046             continue;
                 ; 0000 0047 
                 ; 0000 0048         sprintf(buffer, "H:%d %% ", hum_int);
0000bf 01fe      	MOVW R30,R28
0000c0 93fa      	ST   -Y,R31
0000c1 93ea      	ST   -Y,R30
                +
0000c2 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c4 93fa      	ST   -Y,R31
0000c5 93ea      	ST   -Y,R30
0000c6 2fe3      	MOV  R30,R19
0000c7 27ff      	CLR  R31
0000c8 2766      	CLR  R22
0000c9 2777      	CLR  R23
0000ca 940e 0381 	CALL __PUTPARD1
0000cc e084      	LDI  R24,4
0000cd 940e 02e0 	CALL _sprintf
0000cf 9628      	ADIW R28,8
                 ; 0000 0049         lcd_gotoxy(0, 0);
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93ea      	ST   -Y,R30
0000d2 e0a0      	LDI  R26,LOW(0)
0000d3 d02b      	RCALL _lcd_gotoxy
                 ; 0000 004A         lcd_puts(buffer);
0000d4 01de      	MOVW R26,R28
0000d5 d057      	RCALL _lcd_puts
                 ; 0000 004B         if (hum_int < 40 || hum_int > 60)
0000d6 3238      	CPI  R19,40
0000d7 f010      	BRLO _0x28
0000d8 333d      	CPI  R19,61
0000d9 f010      	BRLO _0x27
                 _0x28:
                 ; 0000 004C             PORTB .1 = 1;
0000da 9ac1      	SBI  0x18,1
                 ; 0000 004D         else
0000db c001      	RJMP _0x2C
                 _0x27:
                 ; 0000 004E             PORTB .1 = 0;
0000dc 98c1      	CBI  0x18,1
                 ; 0000 004F     }
                 _0x2C:
0000dd cfc5      	RJMP _0x23
                 ; 0000 0050 }
                 _0x2F:
0000de cfff      	RJMP _0x2F
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000df 93aa      	ST   -Y,R26
0000e0 b3e5      	IN   R30,0x15
0000e1 70ef      	ANDI R30,LOW(0xF)
0000e2 2fae      	MOV  R26,R30
0000e3 81e8      	LD   R30,Y
0000e4 7fe0      	ANDI R30,LOW(0xF0)
0000e5 2bea      	OR   R30,R26
0000e6 bbe5      	OUT  0x15,R30
                +
0000e7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e8 958a     +DEC R24
0000e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ea 9aaa      	SBI  0x15,2
                +
0000eb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ec 958a     +DEC R24
0000ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ee 98aa      	CBI  0x15,2
                +
0000ef e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f0 958a     +DEC R24
0000f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f2 c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000f3 93aa      	ST   -Y,R26
0000f4 81a8      	LD   R26,Y
0000f5 dfe9      	RCALL __lcd_write_nibble_G100
0000f6 81e8          ld    r30,y
0000f7 95e2          swap  r30
0000f8 83e8          st    y,r30
0000f9 81a8      	LD   R26,Y
0000fa dfe4      	RCALL __lcd_write_nibble_G100
                +
0000fb e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000fc 958a     +DEC R24
0000fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000fe c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000ff 93aa      	ST   -Y,R26
000100 81e8      	LD   R30,Y
000101 e0f0      	LDI  R31,0
000102 5ae0      	SUBI R30,LOW(-__base_y_G100)
000103 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000104 81e0      	LD   R30,Z
000105 81a9      	LDD  R26,Y+1
000106 0fae      	ADD  R26,R30
000107 dfeb      	RCALL __lcd_write_data
000108 8059      	LDD  R5,Y+1
000109 8048      	LDD  R4,Y+0
00010a 9622      	ADIW R28,2
00010b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00010c e0a2      	LDI  R26,LOW(2)
00010d 940e 032d 	CALL SUBOPT_0x0
00010f e0ac      	LDI  R26,LOW(12)
000110 dfe2      	RCALL __lcd_write_data
000111 e0a1      	LDI  R26,LOW(1)
000112 940e 032d 	CALL SUBOPT_0x0
000114 e0e0      	LDI  R30,LOW(0)
000115 2e4e      	MOV  R4,R30
000116 2e5e      	MOV  R5,R30
000117 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000118 93aa      	ST   -Y,R26
000119 81a8      	LD   R26,Y
00011a 30aa      	CPI  R26,LOW(0xA)
00011b f011      	BREQ _0x2000005
00011c 1457      	CP   R5,R7
00011d f048      	BRLO _0x2000004
                 _0x2000005:
00011e e0e0      	LDI  R30,LOW(0)
00011f 93ea      	ST   -Y,R30
000120 9443      	INC  R4
000121 2da4      	MOV  R26,R4
000122 dfdc      	RCALL _lcd_gotoxy
000123 81a8      	LD   R26,Y
000124 30aa      	CPI  R26,LOW(0xA)
000125 f409      	BRNE _0x2000007
000126 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000127 9453      	INC  R5
000128 9aa8      	SBI  0x15,0
000129 81a8      	LD   R26,Y
00012a dfc8      	RCALL __lcd_write_data
00012b 98a8      	CBI  0x15,0
00012c c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00012d 93ba      	ST   -Y,R27
00012e 93aa      	ST   -Y,R26
00012f 931a      	ST   -Y,R17
                 _0x2000008:
000130 81a9      	LDD  R26,Y+1
000131 81ba      	LDD  R27,Y+1+1
000132 91ed      	LD   R30,X+
000133 83a9      	STD  Y+1,R26
000134 83ba      	STD  Y+1+1,R27
000135 2f1e      	MOV  R17,R30
000136 30e0      	CPI  R30,0
000137 f019      	BREQ _0x200000A
000138 2fa1      	MOV  R26,R17
000139 dfde      	RCALL _lcd_putchar
00013a cff5      	RJMP _0x2000008
                 _0x200000A:
00013b 8118      	LDD  R17,Y+0
00013c 9623      	ADIW R28,3
00013d 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00013e 93aa      	ST   -Y,R26
00013f b3e4      	IN   R30,0x14
000140 6fe0      	ORI  R30,LOW(0xF0)
000141 bbe4      	OUT  0x14,R30
000142 9aa2      	SBI  0x14,2
000143 9aa0      	SBI  0x14,0
000144 9aa1      	SBI  0x14,1
000145 98aa      	CBI  0x15,2
000146 98a8      	CBI  0x15,0
000147 98a9      	CBI  0x15,1
000148 8078      	LDD  R7,Y+0
000149 81e8      	LD   R30,Y
00014a 58e0      	SUBI R30,-LOW(128)
                +
00014b 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00014d 81e8      	LD   R30,Y
00014e 54e0      	SUBI R30,-LOW(192)
                +
00014f 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000151 e1a4      	LDI  R26,LOW(20)
000152 e0b0      	LDI  R27,0
000153 940e 0367 	CALL _delay_ms
000155 940e 0333 	CALL SUBOPT_0x1
000157 940e 0333 	CALL SUBOPT_0x1
000159 940e 0333 	CALL SUBOPT_0x1
00015b e2a0      	LDI  R26,LOW(32)
00015c df82      	RCALL __lcd_write_nibble_G100
                +
00015d ec88     +LDI R24 , LOW ( 200 )
00015e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00015f 9701     +SBIW R24 , 1
000160 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000161 e2a8      	LDI  R26,LOW(40)
000162 df90      	RCALL __lcd_write_data
000163 e0a4      	LDI  R26,LOW(4)
000164 df8e      	RCALL __lcd_write_data
000165 e8a5      	LDI  R26,LOW(133)
000166 df8c      	RCALL __lcd_write_data
000167 e0a6      	LDI  R26,LOW(6)
000168 df8a      	RCALL __lcd_write_data
000169 dfa2      	RCALL _lcd_clear
                 _0x2080002:
00016a 9621      	ADIW R28,1
00016b 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00016c 93ba      	ST   -Y,R27
00016d 93aa      	ST   -Y,R26
00016e 931a      	ST   -Y,R17
00016f 930a      	ST   -Y,R16
000170 81aa      	LDD  R26,Y+2
000171 81bb      	LDD  R27,Y+2+1
000172 9612      	ADIW R26,2
000173 940e 0379 	CALL __GETW1P
000175 9730      	SBIW R30,0
000176 f159      	BREQ _0x2020010
000177 81aa      	LDD  R26,Y+2
000178 81bb      	LDD  R27,Y+2+1
000179 9614      	ADIW R26,4
00017a 940e 0379 	CALL __GETW1P
00017c 018f      	MOVW R16,R30
00017d 9730      	SBIW R30,0
00017e f061      	BREQ _0x2020012
                +
00017f 3002     +CPI R16 , LOW ( 2 )
000180 e0e0     +LDI R30 , HIGH ( 2 )
000181 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000182 f098      	BRLO _0x2020013
000183 01f8      	MOVW R30,R16
000184 9731      	SBIW R30,1
000185 018f      	MOVW R16,R30
                +
000186 81aa     +LDD R26 , Y + 2
000187 81bb     +LDD R27 , Y + 2 + 1
000188 9614     +ADIW R26 , 4
000189 93ed     +ST X + , R30
00018a 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00018b 81aa      	LDD  R26,Y+2
00018c 81bb      	LDD  R27,Y+2+1
00018d 9612      	ADIW R26,2
00018e 91ed      	LD   R30,X+
00018f 91fd      	LD   R31,X+
000190 9631      	ADIW R30,1
000191 93fe      	ST   -X,R31
000192 93ee      	ST   -X,R30
000193 9731      	SBIW R30,1
000194 81ac      	LDD  R26,Y+4
000195 83a0      	STD  Z+0,R26
                 _0x2020013:
000196 81aa      	LDD  R26,Y+2
000197 81bb      	LDD  R27,Y+2+1
000198 940e 0379 	CALL __GETW1P
00019a 23ff      	TST  R31
00019b f02a      	BRMI _0x2020014
00019c 91ed      	LD   R30,X+
00019d 91fd      	LD   R31,X+
00019e 9631      	ADIW R30,1
00019f 93fe      	ST   -X,R31
0001a0 93ee      	ST   -X,R30
                 _0x2020014:
0001a1 c006      	RJMP _0x2020015
                 _0x2020010:
0001a2 81aa      	LDD  R26,Y+2
0001a3 81bb      	LDD  R27,Y+2+1
0001a4 efef      	LDI  R30,LOW(65535)
0001a5 efff      	LDI  R31,HIGH(65535)
0001a6 93ed      	ST   X+,R30
0001a7 93fc      	ST   X,R31
                 _0x2020015:
0001a8 8119      	LDD  R17,Y+1
0001a9 8108      	LDD  R16,Y+0
0001aa 9625      	ADIW R28,5
0001ab 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001ac 93ba      	ST   -Y,R27
0001ad 93aa      	ST   -Y,R26
0001ae 9726      	SBIW R28,6
0001af 940e 0386 	CALL __SAVELOCR6
0001b1 e010      	LDI  R17,0
0001b2 85ac      	LDD  R26,Y+12
0001b3 85bd      	LDD  R27,Y+12+1
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 e0f0      	LDI  R31,HIGH(0)
0001b6 93ed      	ST   X+,R30
0001b7 93fc      	ST   X,R31
                 _0x2020016:
0001b8 89ea      	LDD  R30,Y+18
0001b9 89fb      	LDD  R31,Y+18+1
0001ba 9631      	ADIW R30,1
0001bb 8bea      	STD  Y+18,R30
0001bc 8bfb      	STD  Y+18+1,R31
0001bd 9731      	SBIW R30,1
0001be 91e4      	LPM  R30,Z
0001bf 2f2e      	MOV  R18,R30
0001c0 30e0      	CPI  R30,0
0001c1 f409      	BRNE PC+2
0001c2 c115      	RJMP _0x2020018
0001c3 2fe1      	MOV  R30,R17
0001c4 30e0      	CPI  R30,0
0001c5 f439      	BRNE _0x202001C
0001c6 3225      	CPI  R18,37
0001c7 f411      	BRNE _0x202001D
0001c8 e011      	LDI  R17,LOW(1)
0001c9 c002      	RJMP _0x202001E
                 _0x202001D:
0001ca 940e 033b 	CALL SUBOPT_0x2
                 _0x202001E:
0001cc c10a      	RJMP _0x202001B
                 _0x202001C:
0001cd 30e1      	CPI  R30,LOW(0x1)
0001ce f4a9      	BRNE _0x202001F
0001cf 3225      	CPI  R18,37
0001d0 f419      	BRNE _0x2020020
0001d1 940e 033b 	CALL SUBOPT_0x2
0001d3 c102      	RJMP _0x20200CC
                 _0x2020020:
0001d4 e012      	LDI  R17,LOW(2)
0001d5 e040      	LDI  R20,LOW(0)
0001d6 e000      	LDI  R16,LOW(0)
0001d7 322d      	CPI  R18,45
0001d8 f411      	BRNE _0x2020021
0001d9 e001      	LDI  R16,LOW(1)
0001da c0fc      	RJMP _0x202001B
                 _0x2020021:
0001db 322b      	CPI  R18,43
0001dc f411      	BRNE _0x2020022
0001dd e24b      	LDI  R20,LOW(43)
0001de c0f8      	RJMP _0x202001B
                 _0x2020022:
0001df 3220      	CPI  R18,32
0001e0 f411      	BRNE _0x2020023
0001e1 e240      	LDI  R20,LOW(32)
0001e2 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001e3 c002      	RJMP _0x2020024
                 _0x202001F:
0001e4 30e2      	CPI  R30,LOW(0x2)
0001e5 f439      	BRNE _0x2020025
                 _0x2020024:
0001e6 e050      	LDI  R21,LOW(0)
0001e7 e013      	LDI  R17,LOW(3)
0001e8 3320      	CPI  R18,48
0001e9 f411      	BRNE _0x2020026
0001ea 6800      	ORI  R16,LOW(128)
0001eb c0eb      	RJMP _0x202001B
                 _0x2020026:
0001ec c003      	RJMP _0x2020027
                 _0x2020025:
0001ed 30e3      	CPI  R30,LOW(0x3)
0001ee f009      	BREQ PC+2
0001ef c0e7      	RJMP _0x202001B
                 _0x2020027:
0001f0 3320      	CPI  R18,48
0001f1 f010      	BRLO _0x202002A
0001f2 332a      	CPI  R18,58
0001f3 f008      	BRLO _0x202002B
                 _0x202002A:
0001f4 c007      	RJMP _0x2020029
                 _0x202002B:
0001f5 e0aa      	LDI  R26,LOW(10)
0001f6 9f5a      	MUL  R21,R26
0001f7 2d50      	MOV  R21,R0
0001f8 2fe2      	MOV  R30,R18
0001f9 53e0      	SUBI R30,LOW(48)
0001fa 0f5e      	ADD  R21,R30
0001fb c0db      	RJMP _0x202001B
                 _0x2020029:
0001fc 2fe2      	MOV  R30,R18
0001fd 36e3      	CPI  R30,LOW(0x63)
0001fe f449      	BRNE _0x202002F
0001ff 940e 0342 	CALL SUBOPT_0x3
000201 89e8      	LDD  R30,Y+16
000202 89f9      	LDD  R31,Y+16+1
000203 81a4      	LDD  R26,Z+4
000204 93aa      	ST   -Y,R26
000205 940e 0348 	CALL SUBOPT_0x4
000207 c0ce      	RJMP _0x2020030
                 _0x202002F:
000208 37e3      	CPI  R30,LOW(0x73)
000209 f441      	BRNE _0x2020032
00020a 940e 0342 	CALL SUBOPT_0x3
00020c 940e 034e 	CALL SUBOPT_0x5
00020e 940e 0314 	CALL _strlen
000210 2f1e      	MOV  R17,R30
000211 c00a      	RJMP _0x2020033
                 _0x2020032:
000212 37e0      	CPI  R30,LOW(0x70)
000213 f461      	BRNE _0x2020035
000214 940e 0342 	CALL SUBOPT_0x3
000216 940e 034e 	CALL SUBOPT_0x5
000218 940e 0320 	CALL _strlenf
00021a 2f1e      	MOV  R17,R30
00021b 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00021c 6002      	ORI  R16,LOW(2)
00021d 770f      	ANDI R16,LOW(127)
00021e e030      	LDI  R19,LOW(0)
00021f c034      	RJMP _0x2020036
                 _0x2020035:
000220 36e4      	CPI  R30,LOW(0x64)
000221 f011      	BREQ _0x2020039
000222 36e9      	CPI  R30,LOW(0x69)
000223 f411      	BRNE _0x202003A
                 _0x2020039:
000224 6004      	ORI  R16,LOW(4)
000225 c002      	RJMP _0x202003B
                 _0x202003A:
000226 37e5      	CPI  R30,LOW(0x75)
000227 f431      	BRNE _0x202003C
                 _0x202003B:
000228 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000229 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00022a 83ee      	STD  Y+6,R30
00022b 83ff      	STD  Y+6+1,R31
00022c e015      	LDI  R17,LOW(5)
00022d c00c      	RJMP _0x202003D
                 _0x202003C:
00022e 35e8      	CPI  R30,LOW(0x58)
00022f f411      	BRNE _0x202003F
000230 6008      	ORI  R16,LOW(8)
000231 c003      	RJMP _0x2020040
                 _0x202003F:
000232 37e8      	CPI  R30,LOW(0x78)
000233 f009      	BREQ PC+2
000234 c0a1      	RJMP _0x2020071
                 _0x2020040:
000235 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000236 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000237 83ee      	STD  Y+6,R30
000238 83ff      	STD  Y+6+1,R31
000239 e014      	LDI  R17,LOW(4)
                 _0x202003D:
00023a ff02      	SBRS R16,2
00023b c014      	RJMP _0x2020042
00023c 940e 0342 	CALL SUBOPT_0x3
00023e 940e 0358 	CALL SUBOPT_0x6
000240 85ab      	LDD  R26,Y+11
000241 23aa      	TST  R26
000242 f43a      	BRPL _0x2020043
000243 85ea      	LDD  R30,Y+10
000244 85fb      	LDD  R31,Y+10+1
000245 940e 0375 	CALL __ANEGW1
000247 87ea      	STD  Y+10,R30
000248 87fb      	STD  Y+10+1,R31
000249 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00024a 3040      	CPI  R20,0
00024b f011      	BREQ _0x2020044
00024c 5f1f      	SUBI R17,-LOW(1)
00024d c001      	RJMP _0x2020045
                 _0x2020044:
00024e 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00024f c004      	RJMP _0x2020046
                 _0x2020042:
000250 940e 0342 	CALL SUBOPT_0x3
000252 940e 0358 	CALL SUBOPT_0x6
                 _0x2020046:
                 _0x2020036:
000254 fd00      	SBRC R16,0
000255 c011      	RJMP _0x2020047
                 _0x2020048:
000256 1715      	CP   R17,R21
000257 f478      	BRSH _0x202004A
000258 ff07      	SBRS R16,7
000259 c008      	RJMP _0x202004B
00025a ff02      	SBRS R16,2
00025b c004      	RJMP _0x202004C
00025c 7f0b      	ANDI R16,LOW(251)
00025d 2f24      	MOV  R18,R20
00025e 5011      	SUBI R17,LOW(1)
00025f c001      	RJMP _0x202004D
                 _0x202004C:
000260 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000261 c001      	RJMP _0x202004E
                 _0x202004B:
000262 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000263 940e 033b 	CALL SUBOPT_0x2
000265 5051      	SUBI R21,LOW(1)
000266 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000267 2f31      	MOV  R19,R17
000268 ff01      	SBRS R16,1
000269 c017      	RJMP _0x202004F
                 _0x2020050:
00026a 3030      	CPI  R19,0
00026b f0a1      	BREQ _0x2020052
00026c ff03      	SBRS R16,3
00026d c006      	RJMP _0x2020053
00026e 81ee      	LDD  R30,Y+6
00026f 81ff      	LDD  R31,Y+6+1
000270 9125      	LPM  R18,Z+
000271 83ee      	STD  Y+6,R30
000272 83ff      	STD  Y+6+1,R31
000273 c005      	RJMP _0x2020054
                 _0x2020053:
000274 81ae      	LDD  R26,Y+6
000275 81bf      	LDD  R27,Y+6+1
000276 912d      	LD   R18,X+
000277 83ae      	STD  Y+6,R26
000278 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000279 940e 033b 	CALL SUBOPT_0x2
00027b 3050      	CPI  R21,0
00027c f009      	BREQ _0x2020055
00027d 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00027e 5031      	SUBI R19,LOW(1)
00027f cfea      	RJMP _0x2020050
                 _0x2020052:
000280 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000281 e320      	LDI  R18,LOW(48)
000282 81ee      	LDD  R30,Y+6
000283 81ff      	LDD  R31,Y+6+1
000284 940e 037d 	CALL __GETW1PF
000286 87e8      	STD  Y+8,R30
000287 87f9      	STD  Y+8+1,R31
000288 81ee      	LDD  R30,Y+6
000289 81ff      	LDD  R31,Y+6+1
00028a 9632      	ADIW R30,2
00028b 83ee      	STD  Y+6,R30
00028c 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00028d 85e8      	LDD  R30,Y+8
00028e 85f9      	LDD  R31,Y+8+1
00028f 85aa      	LDD  R26,Y+10
000290 85bb      	LDD  R27,Y+10+1
000291 17ae      	CP   R26,R30
000292 07bf      	CPC  R27,R31
000293 f050      	BRLO _0x202005C
000294 5f2f      	SUBI R18,-LOW(1)
000295 85a8      	LDD  R26,Y+8
000296 85b9      	LDD  R27,Y+8+1
000297 85ea      	LDD  R30,Y+10
000298 85fb      	LDD  R31,Y+10+1
000299 1bea      	SUB  R30,R26
00029a 0bfb      	SBC  R31,R27
00029b 87ea      	STD  Y+10,R30
00029c 87fb      	STD  Y+10+1,R31
00029d cfef      	RJMP _0x202005A
                 _0x202005C:
00029e 332a      	CPI  R18,58
00029f f028      	BRLO _0x202005D
0002a0 ff03      	SBRS R16,3
0002a1 c002      	RJMP _0x202005E
0002a2 5f29      	SUBI R18,-LOW(7)
0002a3 c001      	RJMP _0x202005F
                 _0x202005E:
0002a4 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002a5 fd04      	SBRC R16,4
0002a6 c01a      	RJMP _0x2020061
0002a7 3321      	CPI  R18,49
0002a8 f420      	BRSH _0x2020063
0002a9 85a8      	LDD  R26,Y+8
0002aa 85b9      	LDD  R27,Y+8+1
0002ab 9711      	SBIW R26,1
0002ac f409      	BRNE _0x2020062
                 _0x2020063:
0002ad c009      	RJMP _0x20200CD
                 _0x2020062:
0002ae 1753      	CP   R21,R19
0002af f010      	BRLO _0x2020067
0002b0 ff00      	SBRS R16,0
0002b1 c001      	RJMP _0x2020068
                 _0x2020067:
0002b2 c013      	RJMP _0x2020066
                 _0x2020068:
0002b3 e220      	LDI  R18,LOW(32)
0002b4 ff07      	SBRS R16,7
0002b5 c00b      	RJMP _0x2020069
0002b6 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002b7 6100      	ORI  R16,LOW(16)
0002b8 ff02      	SBRS R16,2
0002b9 c007      	RJMP _0x202006A
0002ba 7f0b      	ANDI R16,LOW(251)
0002bb 934a      	ST   -Y,R20
0002bc 940e 0348 	CALL SUBOPT_0x4
0002be 3050      	CPI  R21,0
0002bf f009      	BREQ _0x202006B
0002c0 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002c1 940e 033b 	CALL SUBOPT_0x2
0002c3 3050      	CPI  R21,0
0002c4 f009      	BREQ _0x202006C
0002c5 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002c6 5031      	SUBI R19,LOW(1)
0002c7 85a8      	LDD  R26,Y+8
0002c8 85b9      	LDD  R27,Y+8+1
0002c9 9712      	SBIW R26,2
0002ca f008      	BRLO _0x2020059
0002cb cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002cc ff00      	SBRS R16,0
0002cd c008      	RJMP _0x202006D
                 _0x202006E:
0002ce 3050      	CPI  R21,0
0002cf f031      	BREQ _0x2020070
0002d0 5051      	SUBI R21,LOW(1)
0002d1 e2e0      	LDI  R30,LOW(32)
0002d2 93ea      	ST   -Y,R30
0002d3 940e 0348 	CALL SUBOPT_0x4
0002d5 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002d6 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002d7 cee0      	RJMP _0x2020016
                 _0x2020018:
0002d8 85ac      	LDD  R26,Y+12
0002d9 85bd      	LDD  R27,Y+12+1
0002da 940e 0379 	CALL __GETW1P
0002dc 940e 038d 	CALL __LOADLOCR6
0002de 9664      	ADIW R28,20
0002df 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002e0 92ff      	PUSH R15
0002e1 2ef8      	MOV  R15,R24
0002e2 9726      	SBIW R28,6
0002e3 940e 0388 	CALL __SAVELOCR4
0002e5 940e 0360 	CALL SUBOPT_0x7
0002e7 9730      	SBIW R30,0
0002e8 f419      	BRNE _0x2020072
0002e9 efef      	LDI  R30,LOW(65535)
0002ea efff      	LDI  R31,HIGH(65535)
0002eb c023      	RJMP _0x2080001
                 _0x2020072:
0002ec 01de      	MOVW R26,R28
0002ed 9616      	ADIW R26,6
0002ee 940e 0371 	CALL __ADDW2R15
0002f0 018d      	MOVW R16,R26
0002f1 940e 0360 	CALL SUBOPT_0x7
0002f3 83ee      	STD  Y+6,R30
0002f4 83ff      	STD  Y+6+1,R31
0002f5 e0e0      	LDI  R30,LOW(0)
0002f6 87e8      	STD  Y+8,R30
0002f7 87e9      	STD  Y+8+1,R30
0002f8 01de      	MOVW R26,R28
0002f9 961a      	ADIW R26,10
0002fa 940e 0371 	CALL __ADDW2R15
0002fc 940e 0379 	CALL __GETW1P
0002fe 93fa      	ST   -Y,R31
0002ff 93ea      	ST   -Y,R30
000300 931a      	ST   -Y,R17
000301 930a      	ST   -Y,R16
000302 e6ec      	LDI  R30,LOW(_put_buff_G101)
000303 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000304 93fa      	ST   -Y,R31
000305 93ea      	ST   -Y,R30
000306 01de      	MOVW R26,R28
000307 961a      	ADIW R26,10
000308 dea3      	RCALL __print_G101
000309 019f      	MOVW R18,R30
00030a 81ae      	LDD  R26,Y+6
00030b 81bf      	LDD  R27,Y+6+1
00030c e0e0      	LDI  R30,LOW(0)
00030d 93ec      	ST   X,R30
00030e 01f9      	MOVW R30,R18
                 _0x2080001:
00030f 940e 038f 	CALL __LOADLOCR4
000311 962a      	ADIW R28,10
000312 90ff      	POP  R15
000313 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000314 93ba      	ST   -Y,R27
000315 93aa      	ST   -Y,R26
000316 91a9          ld   r26,y+
000317 91b9          ld   r27,y+
000318 27ee          clr  r30
000319 27ff          clr  r31
                 strlen0:
00031a 916d          ld   r22,x+
00031b 2366          tst  r22
00031c f011          breq strlen1
00031d 9631          adiw r30,1
00031e cffb          rjmp strlen0
                 strlen1:
00031f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000320 93ba      	ST   -Y,R27
000321 93aa      	ST   -Y,R26
000322 27aa          clr  r26
000323 27bb          clr  r27
000324 91e9          ld   r30,y+
000325 91f9          ld   r31,y+
                 strlenf0:
000326 9005      	lpm  r0,z+
000327 2000          tst  r0
000328 f011          breq strlenf1
000329 9611          adiw r26,1
00032a cffb          rjmp strlenf0
                 strlenf1:
00032b 01fd          movw r30,r26
00032c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00032d 940e 00f3 	CALL __lcd_write_data
00032f e0a3      	LDI  R26,LOW(3)
000330 e0b0      	LDI  R27,0
000331 940c 0367 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000333 e3a0      	LDI  R26,LOW(48)
000334 940e 00df 	CALL __lcd_write_nibble_G100
                +
000336 ec88     +LDI R24 , LOW ( 200 )
000337 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000338 9701     +SBIW R24 , 1
000339 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00033a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00033b 932a      	ST   -Y,R18
00033c 85ad      	LDD  R26,Y+13
00033d 85be      	LDD  R27,Y+13+1
00033e 85ef      	LDD  R30,Y+15
00033f 89f8      	LDD  R31,Y+15+1
000340 9509      	ICALL
000341 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000342 89e8      	LDD  R30,Y+16
000343 89f9      	LDD  R31,Y+16+1
000344 9734      	SBIW R30,4
000345 8be8      	STD  Y+16,R30
000346 8bf9      	STD  Y+16+1,R31
000347 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000348 85ad      	LDD  R26,Y+13
000349 85be      	LDD  R27,Y+13+1
00034a 85ef      	LDD  R30,Y+15
00034b 89f8      	LDD  R31,Y+15+1
00034c 9509      	ICALL
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00034e 89a8      	LDD  R26,Y+16
00034f 89b9      	LDD  R27,Y+16+1
000350 9614      	ADIW R26,4
000351 940e 0379 	CALL __GETW1P
000353 83ee      	STD  Y+6,R30
000354 83ff      	STD  Y+6+1,R31
000355 81ae      	LDD  R26,Y+6
000356 81bf      	LDD  R27,Y+6+1
000357 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000358 89a8      	LDD  R26,Y+16
000359 89b9      	LDD  R27,Y+16+1
00035a 9614      	ADIW R26,4
00035b 940e 0379 	CALL __GETW1P
00035d 87ea      	STD  Y+10,R30
00035e 87fb      	STD  Y+10+1,R31
00035f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000360 01de      	MOVW R26,R28
000361 961c      	ADIW R26,12
000362 940e 0371 	CALL __ADDW2R15
000364 940e 0379 	CALL __GETW1P
000366 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000367 9610      	adiw r26,0
000368 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000369 ed80     +LDI R24 , LOW ( 0x7D0 )
00036a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00036b 9701     +SBIW R24 , 1
00036c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00036d 95a8      	wdr
00036e 9711      	sbiw r26,1
00036f f7c9      	brne __delay_ms0
                 __delay_ms1:
000370 9508      	ret
                 
                 __ADDW2R15:
000371 2400      	CLR  R0
000372 0daf      	ADD  R26,R15
000373 1db0      	ADC  R27,R0
000374 9508      	RET
                 
                 __ANEGW1:
000375 95f1      	NEG  R31
000376 95e1      	NEG  R30
000377 40f0      	SBCI R31,0
000378 9508      	RET
                 
                 __GETW1P:
000379 91ed      	LD   R30,X+
00037a 91fc      	LD   R31,X
00037b 9711      	SBIW R26,1
00037c 9508      	RET
                 
                 __GETW1PF:
00037d 9005      	LPM  R0,Z+
00037e 91f4      	LPM  R31,Z
00037f 2de0      	MOV  R30,R0
000380 9508      	RET
                 
                 __PUTPARD1:
000381 937a      	ST   -Y,R23
000382 936a      	ST   -Y,R22
000383 93fa      	ST   -Y,R31
000384 93ea      	ST   -Y,R30
000385 9508      	RET
                 
                 __SAVELOCR6:
000386 935a      	ST   -Y,R21
                 __SAVELOCR5:
000387 934a      	ST   -Y,R20
                 __SAVELOCR4:
000388 933a      	ST   -Y,R19
                 __SAVELOCR3:
000389 932a      	ST   -Y,R18
                 __SAVELOCR2:
00038a 931a      	ST   -Y,R17
00038b 930a      	ST   -Y,R16
00038c 9508      	RET
                 
                 __LOADLOCR6:
00038d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00038e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00038f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000390 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000391 8119      	LDD  R17,Y+1
000392 8108      	LD   R16,Y
000393 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  44 r17:  32 r18:  32 r19:  14 r20:   9 r21:  20 r22:   6 r23:   2 
r24:  25 r25:   5 r26: 104 r27:  43 r28:  17 r29:   1 r30: 165 r31:  59 
x  :  23 y  : 170 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   6 
adiw  :  24 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   1 brne  :  32 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  50 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   3 cpi   :  36 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  23 ld    :  27 ldd   :  77 ldi   :  94 
lds   :   0 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  28 movw  :  16 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :   8 pop   :   1 push  :   1 rcall :  24 ret   :  27 
reti  :   0 rjmp  :  68 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   9 sbic  :   3 sbis  :   3 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :  31 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000728   1794     38   1832   32768   5.6%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
