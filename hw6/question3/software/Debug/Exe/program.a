;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/27/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;
;int ispause = 0;
;int counter = 0;
;
;interrupt[EXT_INT2] void ext_int2_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021       ispause = 1 - ispause;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0022 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt[TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0026 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0027       if (!ispause)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0028       {
; 0000 0029             counter++;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002A             if (counter > 9)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002B             {
; 0000 002C                   counter -= 10;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002D             }
; 0000 002E       }
;PCODE: $00000022 VOL: 0
; 0000 002F }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;void main(void)
; 0000 0031 {
;PCODE: $00000027 VOL: 0
; 0000 0032       DDRC = 0xFF; //output
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0033 
; 0000 0034       GICR |= 0xE0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0035       MCUCR = 0x0A;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0036       MCUCSR = 0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0037       GIFR = 0xE0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038 
; 0000 0039       // Timer 1 config
; 0000 003A       TCCR1A = 0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003B       TCCR1B = 0x0C;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003C       TCNT1H = 0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003D       TCNT1L = 0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003E       ICR1H = 0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003F       ICR1L = 0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0040       OCR1AH = 0x7A;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0041       OCR1AL = 0x12;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0042       OCR1BH = 0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0043       OCR1BL = 0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0044 
; 0000 0045       TIMSK = 0x12;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0046 
; 0000 0047 // Global enable interrupts
; 0000 0048 #asm("sei")
;PCODE: $00000049 VOL: 0
	sei
;PCODE: $0000004A VOL: 0
; 0000 0049 
; 0000 004A       while (1)
;PCODE: $0000004B VOL: 0
; 0000 004B       {
; 0000 004C             PORTC = counter;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 004D       }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004E }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
